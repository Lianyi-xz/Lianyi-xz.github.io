<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Shell 重定向与管道]]></title>
    <url>%2FShell_pipline.html</url>
    <content type="text"><![CDATA[数据重定向 标准输入stdin：代码为0，使用&lt;或&lt;&lt; 准输出stdout：代码为1，使用&gt;或&gt;&gt; 标准错误输出stderr：代码为2，使用2&gt;或2&gt;&gt;>输出到一个已存在的文件中，那个文件就会被覆盖掉>&gt;输出到一个已存在的文件中，数据会在文件最下方累加进去 案例find /home -name .bashrc 2&gt; /dev/null stderr被丢弃find /home -name .bashrc &amp;&gt; /dev/null 所有输出被丢弃 命令执行的判断依据 ； &amp;&amp; || 管道命令 仅处理经由前面一个命令传来的正确信息 选取命令cut，grep 1234567891011cut -dfc -d 后跟分割符号 -f 依据-d的分割字符将遗传信息分割成数段，-f取出第几段 -f 3 -f 3,5 -c 以字符的单位取出固定字符区间 12- 12-20grep -acinv '查找字符串' filename -a 将二进制文件以txt文件的方式查找 -c 计算找到'查找字符串'的次数 -i 忽略大小写 -n 输出行号 -v 反向选择，输出没有'查找字符串'内容的行 排序命令 sort、wc、uniq 123456789101112131415161718sort -fbMnrtuk [file or stdin] -f 忽略大小写差异 -b 忽略最前端空格 -M 以月份来排序 -n 使用纯数字进行排序，默认以文字类型来排序 -r 反向排序 -u uniq 相同的数据仅出现一行代表 -t 分隔符，默认是用Tab键来分隔 -k 以那个区间[field]来进行排序的意思wc -lwm -l 仅列出行 -w 仅列出多少字 -m 多少字符uniq -ic -i 忽略大小写 -c 进行计数 双向重定向 tee 12tee 同时将数据流送与文件与屏幕 字符转换命令 tr、col、join、paste、expand 1234567891011121314151617181920tr -ds set1 ... -d 删除信息中set1这个字符串 -s 替换掉重复的字符 col -xb -x 将tab键转化成对等的空格键 -b 在文字中有/时，仅保留/最后接的字符join -ti12 file1 file2 -t 默认以空格符分隔数据，并对比第一个字段的数据，若两个文件相同，则将两条数据连成一行 -i 忽略大小写差异 -1 代表第一个文件要用那个字段来分析 -2 代表第二个文件要用那个字段来分析paste -d file1 file2 直接将两行贴在一起，中间用tab隔开 -d 分隔符号，默认tab - 若file写成-，表示来自stdin 的数据expand -t file -t 将tab转化成空格键，一般 一个tab可用8个空格键替换，也可以自定义一个tab代表多少字符 切割命令 split 1234split -bl file PREFIX -b 跟准备切割成的文件大小，可加单位，例如b,k,m等等 -l 以行数来切割 PREFIX 代表前导符，可作为切割文件的前导文字 参数代换 xargs 1234567很多命令不支持管道命令，因此可以通过xargs 来提供该命令引用stdin只用xargs -0pen command -0 输入的stdin中的特殊字符转化为一般字符 -p 在执行每个命令的参数时，都会询问用户的意思 -e end of file的意思 -n 次数，每次command命令执行，要使用几个参数的意思 echo '--help' | xargs cat 减号 - 1在管道中前一个命令的stdout可以作为这次的stdin，该stdin与stdout可以利用减号 - 来替代]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell 变量]]></title>
    <url>%2FShell_var.html</url>
    <content type="text"><![CDATA[变量命名规则 变量与内容使用 =号连接，=两边不加空格 变量名仅以英文和数字命名，且英文开头 转义字符\,将特殊字符转换为一般字符 ${命令}为其它命令提供信息 ${变量}累加内容 变量12345678910#查看环境变量 env#查看所有变量 set#查看所支持的语系 locale#以树状图显示进程之间的关系 pstree#声明变量类型 declare/typeset -a 数组 -i 整数 -x 环境变量 -r只读]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux firewalld设置]]></title>
    <url>%2FLinux_firewall.html</url>
    <content type="text"><![CDATA[firewalld 基本使用12345678910111213141516#启动 systemctl start firewalld#停止systemctl disable firewalld#查看状态 systemctl status firewalld #重启systemctl restart firewalld#禁用 systemctl stop firewalld#开机启动systemctl enable firewalld#开机禁用systemctl disable firewalld#是否开机启动systemctl is-enabled firewalld 配置firewalld-cmd1234567891011121314151617181920#查看版本firewall-cmd --version#查看帮助firewall-cmd --help#显示状态firewall-cmd --state#查看所有打开的端口firewall-cmd --zone=public --list-ports#更新防火墙规则firewall-cmd --reload#查看区域信息firewall-cmd --get-active-zones#查看指定接口所属区域firewall-cmd --get-zone-of-interface=eth0#拒绝所有firewall-cmd --panic-on#取消拒绝状态firewall-cmd --panic-off#查看是否拒绝firewall-cmd --query-panic 开启端口12345678#添加 （--permanent永久生效，没有此参数重启后失效）firewall-cmd --zone=public --add-port=80/tcp --permanent #重新载入firewall-cmd --reload#查看firewall-cmd --zone= public --query-port=80/tcp#删除firewall-cmd --zone= public --remove-port=80/tcp --permanent]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 终端提示符]]></title>
    <url>%2FLinux_PS1.html</url>
    <content type="text"><![CDATA[设置终端提示符步骤 修改环境变量 1vim ~/.bashrc 添加修改内容 1export PS1='\[\033[0;31m\]\342\224\214\342\224\200$([[ $? != 0 ]] &amp;&amp; echo "[\[\033[0;31m\]\342\234\227\[\033[0;37m\]]\342\224\200")[\[\033[0;39m\]\u\[\033[01;33m\]@\[\033[01;96m\]\h\[\033[0;31m\]]\342\224\200[\[\033[0;32m\]\w\[\033[0;31m\]]\n\[\033[0;31m\]\342\224\224\342\224\200\342\224\200\342\225\274 \[\033[0m\]\[\e[01;33m\]\$\[\e[0m\]' 加载环境变量 1source ~/.bashrc 图片显示 查看终端提示符设置该命令常被用于剽窃他人的终端提示符 1echo $PS1]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 定时任务]]></title>
    <url>%2FLinux_crontab.html</url>
    <content type="text"><![CDATA[crontab Linux定时任务每分钟检查一次来处理 crontab 语法crontab [-u username] [-ler] crontab参数 l：编辑crontab的工作内容 e：查看crontab的工作内容 r：移除所有crontab的工作内容 u：设定某个用户的cron服务 crontab工作内容crontab内容分为六个部分 minute： 表示分钟，可以是从0到59之间的任何整数 hour：表示小时，可以是从0到23之间的任何整数 day：表示日期，可以是从1到31之间的任何整数 month：表示月份，可以是从1到12之间的任何整数 week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日 command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件 特殊字符 *：任何时刻都接受 \,：代表分隔时段 -：代表时间范围 /n：n代表数字，表达每隔n个单位 案例 30 7 8 ls 指定每月8号的7：30分执行ls命令30 3 10,20 ls 指定每月的10号及20号的3：30执行ls命令/15 ls 每15分钟执行一次ls命令 /1 sleep 3 &amp;&amp; ls 睡眠3秒再执行ls命令]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 文件与目录]]></title>
    <url>%2FLinux_file.html</url>
    <content type="text"><![CDATA[目录简单使用linux路径 相对路径(basename)：从某一非根目录开始的路径 绝对路径(dirname)：从根目录开始的路径 处理目录 cd：切换目录 pwd： 显示当前目录 mkdir： 新建目录 rmdir： 删除目录 ls：查看当前目录下的文件 文件简单使用文件类型 d：目录 l：连接文件 linkfile b：设备文件里面的可供存储的接口设备 c：设备文件里的串行端口文件查看 cat：查看文件全部内容 more：分屏向后查看文件内容 less：分屏前后翻查看文件内容 head：从头查看数行文件内容 tail：从后查看数行文件内容文本处理 cut：选取命令,设置分隔符进行剪切 join：拼接 sed：管道命令 按行处理 awk：分析 sort：排序 uniq：显示重复 grep：查找 diff：比较文件之间不同]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First Blog]]></title>
    <url>%2FFirst_Hexo_Blog.html</url>
    <content type="text"><![CDATA[创建个人博客win 10安装Hexo 安装 git 安装 node.js 安装Hexo 123#git bashnpm install hexo-cli -ghexo -v Hexo设置 hexo初始化12hexo init Bloggit clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next 参考文件NexT主题文档NexT第三方服务分类和标签底部动画NexT个性化ookamiantd.tophexo+github]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
