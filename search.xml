<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>改版上线</title>
    <url>/uoload_life.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><p>改了一点东西，添加了日常栏目</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab 500 异常</title>
    <url>/Gitlab_500.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>生产gitlab首页无法打开，但其仍可使用，本着作死就会死的运维原则，并未对其进行处理。直到我突然意识到博客很久没更新了……</p></blockquote><h3 id="事前处理"><a class="header-anchor" href="#事前处理">¶</a>事前处理</h3><ol><li>通知相关人员在gitlab备份期间暂停操作</li><li>对gitlab进行备份</li><li>备份结束，回复已可以使用</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份命令</span></span><br><span class="line">/opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="故障定位"><a class="header-anchor" href="#故障定位">¶</a>故障定位</h3><h4 id="查询首页相关日志"><a class="header-anchor" href="#查询首页相关日志">¶</a>查询首页相关日志</h4><p>通过gitlab日志，查看首页报错信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gitlab /] gitlab-ctl tail</span><br><span class="line"></span><br><span class="line">Read fragment views/groups/35-20190404022043923436000/projects/1257-20200506024431898030000/root/show/b123046d400b7ca62dcd2f85b982165e (0.1ms)</span><br><span class="line">Completed 500 Internal Server Error <span class="keyword">in</span> 265ms (ActiveRecord: 34.3ms)</span><br><span class="line"></span><br><span class="line">ActionView::Template::Error (Object not found - failed to find pack entry (b6726fa8bf5df962cc3ece92a4053a2234ac5127)):</span><br><span class="line">    2:  ......</span><br></pre></td></tr></table></figure><p>打开gitlab 首页时发现日志报错，内容为首页渲染到群组<code>35-20190404022043923436000</code>的项目<code>1257-2020050602443189803000</code> 渲染失败报错的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#已知情况</span></span><br><span class="line">群组编号：???: 35-20190404022043923436000</span><br><span class="line">项目编号：???: 1257-2020050602443189803000</span><br></pre></td></tr></table></figure><h4 id="获取群组信息"><a class="header-anchor" href="#获取群组信息">¶</a>获取群组信息</h4><p>通过gitlab api，获取群组信息，由于生产gitlab 版本较低，经过多次尝试后，发现仅v3接口可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有群组  token为个人用户私人token</span></span><br><span class="line">[root@gitlab /] curl -H <span class="string">"PRIVATE-TOKEN: &lt;token&gt;"</span> http://172.16.0.1/api/v3/groups</span><br></pre></td></tr></table></figure><p>将返回json 数据复制到<code>https://www.json.cn/</code> 中发现id:<code>35</code> 对应的<code>native</code>群组，打开其他群组和native群组页面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gitlab /] gitlab-ctl tail</span><br><span class="line">Read fragment views/groups/35-20190404022043923436000/projects/1257-20200506024431898030000/groups/show/b123046d400b7ca62dcd2f85b982165e (0.1ms)</span><br><span class="line">Completed 500 Internal Server Error <span class="keyword">in</span> 321ms (ActiveRecord: 18.2ms)</span><br><span class="line"></span><br><span class="line">ActionView::Template::Error (Object not found - failed to find pack entry (b6726fa8bf5df962cc3ece92a4053a2234ac5127)):</span><br><span class="line">    2:  ......</span><br></pre></td></tr></table></figure><p>发现其他群组页面均可打开，native群组仍然报错500，由此确认id为<code>1257</code> 的项目异常导致的gitlab 异常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#已知情况</span></span><br><span class="line">群组编号：native: 35-20190404022043923436000</span><br><span class="line">项目编号：???: 1257-2020050602443189803000</span><br></pre></td></tr></table></figure><h4 id="获取项目信息"><a class="header-anchor" href="#获取项目信息">¶</a>获取项目信息</h4><p>尝试通过api接口获取相关信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gitlab /]curl -H <span class="string">"PRIVATE-TOKEN: &lt;token&gt;"</span> http://172.16.0.1/api/v3/projects/1257</span><br><span class="line">&#123;<span class="string">"message"</span>:<span class="string">"500 Internal Server Error"</span>&#125;</span><br><span class="line">[root@gitlab /] curl -H <span class="string">"PRIVATE-TOKEN: &lt;token&gt;"</span> http://172.16.0.1/api/v3/projects/1061</span><br><span class="line">[&#123;<span class="string">"id"</span>:1061,<span class="string">"description"</span>:<span class="string">""</span>,.....&#125;]</span><br></pre></td></tr></table></figure><p>由于项目有异常，无法通过接口获取项目信息。猜测项目元数据应存在<code>Redis</code>或<code>PostgerSQL</code>中，通过数据库可查询<code>1257</code>为那个项目。其后发现该服务没有终端连接工具，结束。<br>已知打开首页和群组页面报错，推断可得出打开<code>1257</code>项目页面也会报错，可通过打开所有项目页面方式找出<code>1257</code>项目。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入gitlab 存储库</span></span><br><span class="line">[root@gitlab /] <span class="built_in">cd</span> /var/opt/gitlab/git-data/gitlab-satellites/</span><br><span class="line"><span class="comment">#查询群组和项目共文件夹数量</span></span><br><span class="line">[root@gitlab gitlab-satellites]<span class="comment"># find ./ -name "*" -type d -maxdepth 2 |wc -l</span></span><br><span class="line">2414</span><br><span class="line"><span class="comment">#查询群组文件夹数量</span></span><br><span class="line">[root@gitlab gitlab-satellites]<span class="comment"># find ./ -name "*" -type d -maxdepth 1 |wc -l</span></span><br><span class="line">42</span><br><span class="line"><span class="comment">#2414-42=这个活不能做</span></span><br></pre></td></tr></table></figure><p>经过查阅相关文档发现，不仅仅可以通过<code>id</code> 还可以通过<code>项目名</code>获取项目信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取native 群组下 所有项目</span></span><br><span class="line">[root@gitlab native] ll |awk  <span class="string">'&#123;print $9&#125;'</span></span><br><span class="line"><span class="comment">#编写curl脚本</span></span><br><span class="line">vim curl.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=<span class="string">"</span></span><br><span class="line"><span class="string">project_name</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$name</span> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   curl -H <span class="string">"PRIVATE-TOKEN: &lt;token&gt;"</span> http://172.16.0.1/api/v3/projects?search=<span class="variable">$i</span> &gt; <span class="variable">$i</span>.txt </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#运行脚本</span></span><br><span class="line">sh curl.sh</span><br><span class="line"><span class="comment">#查看报错500项目</span></span><br><span class="line">grep <span class="string">"500 "</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#已知情况</span></span><br><span class="line">群组编号：native: 35-20190404022043923436000</span><br><span class="line">项目编号：tomcat-data: 1257-2020050602443189803000</span><br></pre></td></tr></table></figure><h4 id="存储库修复"><a class="header-anchor" href="#存储库修复">¶</a>存储库修复</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gitlab tomcat-data.git]<span class="comment"># cd gitlab/repositories/&lt;namespace&gt;/&lt;reponame&gt;.git</span></span><br><span class="line"><span class="comment">#检查仓库一致性</span></span><br><span class="line">[root@gitlab tomcat-data.git]<span class="comment"># git fsck</span></span><br><span class="line">fatal: object 13d581f3f22d589c3cd369cce29e066268a361f3 is corrupted</span><br><span class="line"><span class="comment">#删除空白文件</span></span><br><span class="line">[root@gitlab tomcat-data.git]<span class="comment"># find . -size 0 -delete</span></span><br><span class="line"><span class="comment">#检查仓库一致性</span></span><br><span class="line">[root@gitlab tomcat-data.git]<span class="comment"># git fsck</span></span><br><span class="line">error: HEAD: invalid sha1 pointer b6726fa8bf5df962cc3ece92a4053a2234ac5127</span><br><span class="line">error: refs/heads/master does not point to a valid object!</span><br><span class="line">notice: No default references</span><br><span class="line">dangling commit 632b34c07b90e704c984015ea52f6031af208771</span><br><span class="line"><span class="comment"># 发现refs/heads/master为空 且存在悬挂commit,将该commit写入master</span></span><br><span class="line">[root@gitlab tomcat-data.git]<span class="comment"># echo "commit 632b34c07b90e704c984015ea52f6031af208771" &gt;refs/heads/master</span></span><br></pre></td></tr></table></figure><p>打开项目页面成功</p><h3 id="参考文档"><a class="header-anchor" href="#参考文档">¶</a>参考文档</h3><p><a href="https://docs.gitlab.com/ee/api/README.html" target="_blank" rel="noopener">API Docs</a><br><a href="https://www.cnblogs.com/dylancao/p/6625431.html" target="_blank" rel="noopener">git gc和fsck的用法</a><br><a href="https://www.cnblogs.com/amyzhu/p/8988519.html" target="_blank" rel="noopener">gitlab查看项目ID/projectId</a><br><a href="https://stackoverflow.com/questions/36546774/gitlab-repository-error-failed-to-find-pack-entry" target="_blank" rel="noopener">gitlab-repository-corrupted-showing-500-error-on-frontend</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 挂载异常处理</title>
    <url>/Linux_mount.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>大清早被电话吵醒说服务异常让看一下，眯着眼摸电脑开机联网连堡垒机登录服务器一套流程熟练的都没人心疼。</p></blockquote><h3 id="故障定位"><a class="header-anchor" href="#故障定位">¶</a>故障定位</h3><p>根据异常现象定位到出现问题的应用，登录到相应的服务器查看业务日志。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@middleware-0-2 logs]<span class="comment">#  tail -f project.log</span></span><br><span class="line">2020-05-10 09:00:03,124 ERROR  UpdateRepDbf - 更新应答库线程中断异常</span><br><span class="line">java.lang.NullPointerException: null</span><br><span class="line">2020-05-10 09:00:03,125 ERROR  ReaderRandom - 应答库路径错误:/zdData/rep.dbf,message:</span><br><span class="line">java.io.FileNotFoundException: /zdData/rep.dbf (Permission denied)</span><br><span class="line">	at java.io.......</span><br></pre></td></tr></table></figure><p>通过业务日志发现是由于共享盘文件(windwos文件夹)不存在导致的业务异常，然后查看挂载情况</p><a id="more"></a><h3 id="异常处理"><a class="header-anchor" href="#异常处理">¶</a>异常处理</h3><p>首先查看挂载情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@middleware-0-2 /]<span class="comment">#  cd /</span></span><br><span class="line">[root@middleware-0-2 /]<span class="comment">#  ls -l |grep zd</span></span><br><span class="line">d??????????   ? ?    ?        ?            ? zdData</span><br><span class="line"></span><br><span class="line">[root@middleware-0-2 /]<span class="comment"># df -h</span></span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/VolGroup-lv_root</span><br><span class="line">                       95G  6.1G   84G   7% /</span><br><span class="line">tmpfs                 3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">/dev/sda1             190M   41M  140M  23% /boot</span><br></pre></td></tr></table></figure><p>发现挂载已卸载，且挂载文件处于异常状态，查看linux 系统状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ccount-csdc-170-183 /]<span class="comment"># uptime</span></span><br><span class="line"> 11:11:17 up 144 days, 23:02, 18 users,  load average: 0.08, 0.18, 0.29</span><br></pre></td></tr></table></figure><p>linux 系统无异常启动，查看windwos 服务器是否启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@middleware-0-2 /]<span class="comment">#  ping 192.168.0.1</span></span><br><span class="line">PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.1: icmp_seq=1 ttl=123 time=0.642 ms</span><br><span class="line">64 bytes from 192.168.0.1: icmp_seq=2 ttl=123 time=0.670 ms</span><br><span class="line">64 bytes from 192.168.0.1: icmp_seq=3 ttl=123 time=0.751 ms</span><br></pre></td></tr></table></figure><p>业务服务器无异常及windows服务器存活，尝试重新挂载共享盘</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@middleware-0-2 /] umount zdData</span><br><span class="line">[root@middleware-0-2 /]<span class="comment">#  mount.cifs //192.168.0.1/data /zdData -o user=user,pass=pass1</span></span><br><span class="line">mount error(13): Permission denied</span><br><span class="line">Refer to the mount.cifs(8) manual page (e.g. man mount.cifs)</span><br></pre></td></tr></table></figure><p>挂载失败报错，初步判断共享盘出现问题，尝试通过windows服务器挂载共享盘<br><img src="../images/linux_mount_01.jpg" alt="windows挂载图片"></p><p>发现为密码错误，联系同事得知密码已修改，通过新密码挂载共享盘重启应用后问题解决</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Rsync文件同步</title>
    <url>/Linux_rysnc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>出于容灾的考虑，每日晚对视频文件进行备份。</p></blockquote><h3 id="技术选型"><a class="header-anchor" href="#技术选型">¶</a>技术选型</h3><p>文件传输我最常用的是<code>rsync</code>和<code>scp</code>，两者都基于ssh协议进行文件传输。 介于申请22端口的网络规则，我会被按在地上打，所以需要使用其它端口进行文件传输。</p><h4 id="解决方案"><a class="header-anchor" href="#解决方案">¶</a>解决方案</h4><ol><li>ssh监听多个端口，使用<code>rsync</code>或<code>scp</code>进行文件传输</li><li>使用<code>scp</code>的<code>-P</code>参数指定其它端口进行文件传输</li><li>使用<code>rsync</code> 守护进程进行文件传输</li></ol><a id="more"></a><h4 id="方案选择"><a class="header-anchor" href="#方案选择">¶</a>方案选择</h4><p>方案一：除了让我知道ssh 还可以监听多个端口毫无卵用，且对服务器进行额外配置会给运维、服务迁移等埋下隐患<br>方案二：指定端口为自定义端口，不直观<br>方案三：守护进程默认使用<code>873</code>端口，支持增量备份</p><h3 id="架构图"><a class="header-anchor" href="#架构图">¶</a>架构图</h3><p><img src="../images/Linux_rsync_01.jpg" alt></p><h3 id="Rsync-进行定时备份"><a class="header-anchor" href="#Rsync-进行定时备份">¶</a>Rsync 进行定时备份</h3><h4 id="rsync-server-部署"><a class="header-anchor" href="#rsync-server-部署">¶</a>rsync server 部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看软件包</span></span><br><span class="line">rpm -qc rsync </span><br><span class="line"><span class="comment">#安装与卸载 系统默认自带rsync</span></span><br><span class="line">yum install -y rsync</span><br><span class="line">yum  remove rsync</span><br><span class="line"><span class="comment">#新建rsync用户</span></span><br><span class="line">useradd -M -s /sbin/nologin rsync</span><br><span class="line"><span class="comment">#开启自启动</span></span><br><span class="line">chkconfig --list |grep rsync</span><br><span class="line">chkconfig rsync on</span><br><span class="line"><span class="comment">#设置 认证账号密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"rysnc_backup:Passwd"</span> &gt;/etc/rsync.passwd</span><br><span class="line">chmod 600 /etc/rsync.passwd</span><br><span class="line"><span class="comment">#修改备份目录权限</span></span><br><span class="line">chown -R rsync.rsync /nas/project_name_videofile</span><br></pre></td></tr></table></figure><h4 id="编辑-Rsync-配置文件"><a class="header-anchor" href="#编辑-Rsync-配置文件">¶</a>编辑 Rsync 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局模块</span></span><br><span class="line">uid = rsync</span><br><span class="line">gid = rsync</span><br><span class="line">port = 873</span><br><span class="line"><span class="comment">#无需root身份运行，允许存储文件的完整性</span></span><br><span class="line">fake super = yes</span><br><span class="line"><span class="comment">#关闭假根功能</span></span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 600</span><br><span class="line"><span class="comment">#忽略错误信息</span></span><br><span class="line">ignore errors</span><br><span class="line"><span class="comment">#对备份数据可读写</span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line"><span class="comment">#不允许查看模块信息</span></span><br><span class="line">list = <span class="literal">true</span></span><br><span class="line"><span class="comment">#允许虚拟用户作为连接认证用户</span></span><br><span class="line">auth users = rsync_backup</span><br><span class="line"><span class="comment">#定义rsync服务用户连接认证密码文件路径</span></span><br><span class="line">secrets file = /etc/rsync.passwd</span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line">lock file=/var/run/rsync.lock</span><br><span class="line"><span class="built_in">log</span> format = %t %a %m %f %b</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="comment">#局部模块</span></span><br><span class="line">[videofile]</span><br><span class="line"><span class="comment">#模块注释信息</span></span><br><span class="line">comment = 192.168.147.214:/videofile</span><br><span class="line">path = /nas/project_name_videofile</span><br><span class="line">hosts allow = 192.168.147.214 192.168.147.215</span><br></pre></td></tr></table></figure><h4 id="rsync-启动"><a class="header-anchor" href="#rsync-启动">¶</a>rsync 启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看 守护信息</span></span><br><span class="line">cat /etc/xinetd.d/rsync</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">/etc/init.d/xinetd start|stop|restart</span><br></pre></td></tr></table></figure><h4 id="业务服务器添加定时增量备份脚本"><a class="header-anchor" href="#业务服务器添加定时增量备份脚本">¶</a>业务服务器添加定时增量备份脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">30 22 * * * bash /script/rsync-videofile.sh</span><br><span class="line"></span><br><span class="line">vim  /script/rsync-videofile.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">HOST=$(hostname)</span><br><span class="line">ADDR=$(hostname -I)</span><br><span class="line">DATE=$(date)</span><br><span class="line">DEST=<span class="variable">$&#123;HOST&#125;</span><span class="string">" | "</span><span class="variable">$&#123;ADDR&#125;</span><span class="string">" | "</span><span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=<span class="string">"Passwd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DEST</span> &gt;&gt; /videofile/rsync_videofile.log</span><br><span class="line">rsync -vzurtopg --progress  /videofile/  rsync_backup@192.168.70.227::project_name_videofile </span><br><span class="line"><span class="built_in">echo</span> $(date)<span class="string">" end"</span> &gt;&gt; /videofile/rsync_videofile.log</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 小技巧</title>
    <url>/Linux_Shell_use.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>我使用过的 Shell 小技巧，不定期更新</p></blockquote><h4 id="按行读取文件内容"><a class="header-anchor" href="#按行读取文件内容">¶</a>按行读取文件内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#key-value</span></span><br><span class="line">	<span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">		key=<span class="variable">$&#123;line%=*&#125;</span></span><br><span class="line">		value=<span class="variable">$&#123;line#*=&#125;</span></span><br><span class="line">	<span class="keyword">done</span> &lt; ./config.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># while循环中调用ssh命令时，重定向给while命令的数据，会被ssh命令读走了，导致循环出问题</span></span><br><span class="line">	<span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">		ip=<span class="variable">$&#123;line%=*&#125;</span></span><br><span class="line">		data=<span class="variable">$&#123;line#*=&#125;</span></span><br><span class="line">		ssh -q -n <span class="variable">$ip</span> <span class="string">"echo <span class="variable">$data</span>"</span></span><br><span class="line">	<span class="keyword">done</span> &lt; ./config.sh</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="导入配置文件"><a class="header-anchor" href="#导入配置文件">¶</a>导入配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./config.ini</span><br></pre></td></tr></table></figure><h4 id="获取默认变量"><a class="header-anchor" href="#获取默认变量">¶</a>获取默认变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取第一个变量</span></span><br><span class="line"><span class="variable">$1</span></span><br><span class="line"><span class="comment">#获取第二到最后一个变量</span></span><br><span class="line"><span class="variable">$&#123;@:2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="截取变量字符串"><a class="header-anchor" href="#截取变量字符串">¶</a>截取变量字符串</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取第一个/ 之前的字符</span></span><br><span class="line"><span class="variable">$&#123;file%%/*&#125;</span></span><br><span class="line"><span class="comment">#获取第一个/ 之后的字符</span></span><br><span class="line"><span class="variable">$&#123;file#*/&#125;</span></span><br><span class="line"><span class="comment">#获取最后一个/ 之前的字符</span></span><br><span class="line"><span class="variable">$&#123;file%/*&#125;</span></span><br><span class="line"><span class="comment">#获取最后一个/ 之后的字符</span></span><br><span class="line"><span class="variable">$&#123;file##*/&#125;</span></span><br></pre></td></tr></table></figure><h4 id="判断变量子串"><a class="header-anchor" href="#判断变量子串">¶</a>判断变量子串</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ $(<span class="built_in">echo</span> <span class="variable">$tag</span> | grep <span class="string">"release"</span>) == <span class="string">""</span> ]];<span class="keyword">then</span> <span class="built_in">exit</span> 0;<span class="keyword">fi</span></span><br><span class="line"><span class="comment">#从第0个位置数7个字符</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;tag:0:7&#125;</span> -ne <span class="string">'release'</span> ]];<span class="keyword">then</span> <span class="built_in">exit</span> 0;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="查询调用指定ip的服务"><a class="header-anchor" href="#查询调用指定ip的服务">¶</a>查询调用指定ip的服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `netstat -anp | grep  ip |awk -F <span class="string">' '</span> <span class="string">'&#123;print $7&#125;'</span> | sort -rn | uniq |awk -F/ <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	pwdi=`pwdx <span class="variable">$i</span> |awk <span class="string">'&#123;print $2&#125;'</span> `</span><br><span class="line">	<span class="built_in">cd</span> <span class="variable">$pwdi</span>/bin </span><br><span class="line">	<span class="built_in">echo</span> `<span class="built_in">pwd</span>`</span><br><span class="line">	<span class="comment">#查看是否为tomcat</span></span><br><span class="line">	ls |grep run.sh</span><br><span class="line">	<span class="comment">#查看是否为其他项目</span></span><br><span class="line">	ls |grep catalina.sh</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="通过中间主机建立ssh"><a class="header-anchor" href="#通过中间主机建立ssh">¶</a>通过中间主机建立ssh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -t B ssh C</span><br></pre></td></tr></table></figure><h4 id="sshpass"><a class="header-anchor" href="#sshpass">¶</a>sshpass</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scp 不填写密码</span></span><br><span class="line">sshpass -p password scp root@ip:/os/path/* /os/path</span><br><span class="line"><span class="comment">#互信不输入密码</span></span><br><span class="line">sshpass -p password  ssh-copy-id root@ip</span><br></pre></td></tr></table></figure><h4 id="网络命令"><a class="header-anchor" href="#网络命令">¶</a>网络命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#抓包</span></span><br><span class="line">tcpdump -i eth0 port 53 -s0 -vvv</span><br><span class="line"><span class="comment">#发送一个数据包</span></span><br><span class="line">nc -vtzw 5 ip port</span><br><span class="line"><span class="comment">#临时监听TCP端口</span></span><br><span class="line">nc -l port</span><br></pre></td></tr></table></figure><h4 id="文件中插入字符块"><a class="header-anchor" href="#文件中插入字符块">¶</a>文件中插入字符块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'EOF'</span>&gt;&gt;  /usr/<span class="built_in">local</span>/nginx/conf/conf.d/nginx_upstream.conf</span><br><span class="line"><span class="comment"># 使用 该方式不会丢掉变量</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat /usr/<span class="built_in">local</span>/nginx/conf/conf.d/nginx_upstream.conf</span><br></pre></td></tr></table></figure><h4 id="压缩并加密文件"><a class="header-anchor" href="#压缩并加密文件">¶</a>压缩并加密文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密日志 不保留原gz文件</span></span><br><span class="line">find -L /usr/<span class="built_in">local</span>/<span class="variable">$appname</span>/logs -<span class="built_in">type</span> f  -name <span class="string">"*gz"</span> |xargs -i zip -m -rP passwd  &#123;&#125;.zip  &#123;&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile JDK1.8</title>
    <url>/Docker_jdk.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="极简-Dockerfile"><a class="header-anchor" href="#极简-Dockerfile">¶</a>极简 Dockerfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos:centos7.2.1511 </span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /home/wwwroot/example/server/jdk1.8.0_161</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/ </span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">RUN mkdir -p <span class="string">"/home/wwwroot/example/server/"</span> </span><br><span class="line"></span><br><span class="line">ADD jdk-8u161-linux-x64.tar.gz /home/wwwroot/example/server/</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 代理配置</title>
    <url>/Nginx_Porxy.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>开发需求将流量转到网关。使用重定向实现后，开发反馈 访问接口数翻倍，最终使用重定向实现<br>302重定向会导致POST 请求转成GET请求，推荐使用307</p></blockquote><h3 id="301、302、307、proxy"><a class="header-anchor" href="#301、302、307、proxy">¶</a>301、302、307、proxy</h3><ul><li>301：永久重定向</li><li>302：临时重定向</li><li>307：临时重定向，不修改请求方法</li><li>proxy：代理</li></ul><a id="more"></a><h3 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream GW&#123;</span><br><span class="line">  server  127.0.0.1:8889 max_fails=3 fail_timeout=50s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  dev.xxx.com;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /home/xxx.com.crt;</span><br><span class="line">        ssl_certificate_key /home/xxx.com.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location ^~ /gw/ &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">                        <span class="built_in">return</span> 200;</span><br><span class="line">                &#125;</span><br><span class="line">                access_log logs/dev.log;</span><br><span class="line">                proxy_pass http://GW;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location  / &#123;</span><br><span class="line">                access_log logs/dev.log;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">                        <span class="built_in">return</span> 200;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$request_method</span> != <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line"><span class="comment">#                        return  307 https://dev.xxx.com/gw$request_uri;</span></span><br><span class="line">                         proxy_pass http://GW/gw<span class="variable">$request_uri</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Yapi部署并迁移文档</title>
    <url>/Devops_Yapi.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="安装node-js-8-15"><a class="header-anchor" href="#安装node-js-8-15">¶</a>安装node.js 8.15</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最新版</span></span><br><span class="line">https://nodejs.org/dist/v10.15.0/node-v10.15.0-darwin-x64.tar.gz</span><br><span class="line"><span class="comment">#8.15版本</span></span><br><span class="line">https://nodejs.org/dist/latest-v8.x/node-v8.15.0-linux-x64.tar.gz</span><br><span class="line"><span class="comment">#解压8.15版本</span></span><br><span class="line">tar xvf node-v8.15.0-linux-x64.tar.gz</span><br><span class="line">mv node-v8.15.0-linux-x64 /etc/nodejs</span><br><span class="line"><span class="comment">#编辑环境变量</span></span><br><span class="line">vim  /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/nodejs/bin</span><br><span class="line"><span class="comment">#使生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装mongodb4-05"><a class="header-anchor" href="#安装mongodb4-05">¶</a>安装mongodb4.05</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装最新版mongodb</span></span><br><span class="line"><span class="comment">#下载速度慢，可直接拷贝当前yapi的/home/wwwroot/xxx/server/mongodb文件夹</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.0.5.tgz</span><br><span class="line"><span class="comment">#解压mongodb</span></span><br><span class="line">tar xvf mongodb-linux-x86_64-rhel70-4.0.5.tgz</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-4.0.5 /home/wwwroot/xxx/server/mongodb</span><br><span class="line"><span class="comment">#创建mongodb 日志和数据文件夹</span></span><br><span class="line">mkdir -p /home/wwwroot/xxx/logs/mongo</span><br><span class="line">home/wwwroot/xxx/database/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment">#编写mongodb配置文件</span></span><br><span class="line">vim /home/wwwroot/xxx/server/mongodb/bin/mongod.conf</span><br><span class="line">port=27017</span><br><span class="line">bind_ip=127.0.0.1</span><br><span class="line">logpath=/home/wwwroot/xxx/logs/mongo/mongod.log  </span><br><span class="line">logappend=<span class="literal">true</span>  </span><br><span class="line">fork=<span class="literal">true</span>  </span><br><span class="line">dbpath=/home/wwwroot/xxx/database/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行mongodb</span></span><br><span class="line">./mongod -f mongod.conf</span><br><span class="line"><span class="comment">#创建数据库以及数据库用户</span></span><br><span class="line">./mongo</span><br><span class="line">use admin</span><br><span class="line">use yapi</span><br><span class="line">db.createUser(&#123;<span class="string">'user'</span>:<span class="string">'root'</span>,<span class="string">'pwd'</span>:<span class="string">'root'</span>,<span class="string">'roles'</span>:[&#123; <span class="string">"role"</span> : <span class="string">"readWrite"</span>, <span class="string">"db"</span> : <span class="string">"yapi"</span> &#125;]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#源服务器中导出源yapi平台数据</span></span><br><span class="line">mongodump -d yapi -o /home/yapi_data</span><br><span class="line"><span class="comment">#将数据传输到新yapi服务器中</span></span><br><span class="line"><span class="comment">#新服务器中导入源yapi平台数据</span></span><br><span class="line">mongorestore -d yapi --drop /home/yapi_data</span><br></pre></td></tr></table></figure><h3 id="安装git和pm2"><a class="header-anchor" href="#安装git和pm2">¶</a>安装git和pm2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br><span class="line">npm install -g pm2 --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装并启动yapi"><a class="header-anchor" href="#安装并启动yapi">¶</a>安装并启动yapi</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接复制源服务器/home/wwwroot/xxx/server/yapi文件夹</span></span><br><span class="line">mv yapi /home/wwwroot/xxx/server/yapi</span><br><span class="line"><span class="comment">#启动yapi</span></span><br><span class="line">/home/wwwroot/xxx/server/yapi/vendors/server</span><br><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure><h3 id="配置nignx"><a class="header-anchor" href="#配置nignx">¶</a>配置nignx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    upstream yapi&#123;</span><br><span class="line">      server 127.0.0.1:3000;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">           proxy_pass http://yapi;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#重新加载nginx 配置</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="comment">#访问yapi</span></span><br><span class="line">http://ip:80</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 集群安装</title>
    <url>/Redis_install.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>redis 若使用root用户启动，可对服务器进行提权</p></blockquote><h3 id="架构"><a class="header-anchor" href="#架构">¶</a>架构</h3><table><thead><tr><th style="text-align:center">主机名</th><th style="text-align:center">ip</th><th style="text-align:center">port</th><th style="text-align:center">操作系统</th><th style="text-align:center">用途</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">redis01</td><td style="text-align:center">172.16.1.61</td><td style="text-align:center">6379,6380,6381</td><td style="text-align:center">centos 7</td><td style="text-align:center">gitlab</td><td style="text-align:center">192.168.116.137</td></tr><tr><td style="text-align:center">redis02</td><td style="text-align:center">172.16.1.62</td><td style="text-align:center">6379,6380,6381</td><td style="text-align:center">centos 7</td><td style="text-align:center">gitlab</td><td style="text-align:center">192.168.116.148</td></tr><tr><td style="text-align:center">redis03</td><td style="text-align:center">172.16.1.63</td><td style="text-align:center">6379,6380,6381</td><td style="text-align:center">centos 7</td><td style="text-align:center">gitlab</td><td style="text-align:center">192.168.116.149</td></tr></tbody></table><h3 id="安装redis"><a class="header-anchor" href="#安装redis">¶</a>安装redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc -y</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br><span class="line">tar xzf redis-5.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-5.0.3</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/redis</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/redis/data1</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/redis/data2</span><br><span class="line">make &amp;&amp; make  install</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="redis启动"><a class="header-anchor" href="#redis启动">¶</a>redis启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动redis服务器端</span></span><br><span class="line">redis-server</span><br><span class="line"><span class="comment">#关闭redis 客户端</span></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">service redis restart</span><br><span class="line"><span class="comment">#检查是否启动</span></span><br><span class="line">redis-cli </span><br><span class="line">ping</span><br></pre></td></tr></table></figure><h3 id="设置配置文件"><a class="header-anchor" href="#设置配置文件">¶</a>设置配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复制配置文件</span></span><br><span class="line">cp /root/redis-5.0.3/redis.conf /usr/<span class="built_in">local</span>/bin/redis.conf</span><br><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vi /usr/<span class="built_in">local</span>/bin/redis.conf</span><br><span class="line"><span class="comment">#设置绑定网卡</span></span><br><span class="line"><span class="built_in">bind</span> 172.16.1.61</span><br><span class="line"><span class="comment">#设置绑定端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment">#开启后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#数据目录和数据库写入目录</span></span><br><span class="line">dir /usr/<span class="built_in">local</span>/redis/data1/</span><br><span class="line"><span class="comment">#pid存在位置</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"><span class="comment">#记录日志信息</span></span><br><span class="line">logfile <span class="string">"/var/log/redis/redis_6379.log"</span></span><br><span class="line"><span class="comment">#设置redis密码</span></span><br><span class="line">requirepass yourpassword </span><br><span class="line"><span class="comment">#配置cluster集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#运行redis</span></span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/bin/redis.conf</span><br></pre></td></tr></table></figure><h3 id="搭建redis-cluster-数据分片-集群"><a class="header-anchor" href="#搭建redis-cluster-数据分片-集群">¶</a>搭建redis cluster(数据分片)集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建节点文件夹</span></span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/redis/redisc1</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/redis/redisc2</span><br><span class="line"><span class="comment">#复制数据文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">cp * /usr/<span class="built_in">local</span>/redis/redisc1/</span><br><span class="line">cp * /usr/<span class="built_in">local</span>/redis/redisc2/</span><br><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/redis/redisc1/redisc1.conf</span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/redis/redisc2/redisc2.conf</span><br><span class="line"><span class="comment">#redis 最少三个主节点三个从节点</span></span><br><span class="line"><span class="comment">#redis5之后无需额外安装ruby</span></span><br><span class="line">redis-cli --cluster create 172.16.1.61:6379 172.16.1.62:6379 172.16.1.63:6379 172.16.1.61:6380 172.16.1.62:6380 172.16.1.63:6380  --cluster-replicas 1</span><br></pre></td></tr></table></figure><h3 id="搭建-redis-sentinel-哨兵-集群"><a class="header-anchor" href="#搭建-redis-sentinel-哨兵-集群">¶</a>搭建 redis sentinel(哨兵)集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#编辑从库文件</span></span><br><span class="line">vi  /usr/<span class="built_in">local</span>/redis/rediss1/rediss1.conf</span><br><span class="line"><span class="comment">#配置主服务的ip和端口</span></span><br><span class="line">replicaof 172.16.1.61 6381</span><br><span class="line"><span class="comment">#主服务器密码</span></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"><span class="comment">#配置从服务默认为只读模式</span></span><br><span class="line">replica-read-only：yes</span><br><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/redis/rediss1/rediss1.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制哨兵文件</span></span><br><span class="line">cp /root/redis-5.0.3/sentinel.conf /usr/<span class="built_in">local</span>/redis/rediss1/</span><br><span class="line"><span class="comment">#监视集群主节点</span></span><br><span class="line">sentinel monitor mymaster 172.16.1.61 6381 2</span><br><span class="line"><span class="comment">#后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#启动哨兵</span></span><br><span class="line">redis-sentinel /usr/<span class="built_in">local</span>/redis/rediss1/sentinel.conf</span><br></pre></td></tr></table></figure><h3 id="出现问题"><a class="header-anchor" href="#出现问题">¶</a>出现问题</h3><blockquote><p>tcl太久</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://downloads.sourceforge.net/tcl/</span><br><span class="line"></span><br><span class="line">-src.tar.gz</span><br><span class="line">tar xzvf tcl8.6.1-src.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tcl8.6.1/unix/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a class="header-anchor" href="#参考文档">¶</a>参考文档</h3><p><a href="http://redis.io/download" target="_blank" rel="noopener">redis下载地址</a><br><a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener">redis集群文档</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>df -h 不可中断解决</title>
    <url>/Linux_df.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="状况"><a class="header-anchor" href="#状况">¶</a>状况</h3><p>登陆服务器使用<code>df -h</code> 命令后无法终止，且<code>Ctrl+C</code>无法退出<br><code>kill -9 pid</code> 无法杀死进程</p><h3 id="查看当前状态"><a class="header-anchor" href="#查看当前状态">¶</a>查看当前状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">ps -aux |grep df</span><br><span class="line"><span class="comment">#进程状态为D：不可中断的睡眠</span></span><br><span class="line">root      9356  0.0  0.0 108236   636 ?        D     2018   0:00 df -h</span><br><span class="line"><span class="comment">#kill -9</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="问题解决"><a class="header-anchor" href="#问题解决">¶</a>问题解决</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前进程运行状态</span></span><br><span class="line">strace df</span><br><span class="line"><span class="comment">#状态详情</span></span><br><span class="line">……</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">"/sys/kernel/config"</span>, &#123;st_mode=S_IFDIR|0755, st_size=0, ...&#125;) = 0</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">"/"</span>, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">"/proc/sys/fs/binfmt_misc"</span>, </span><br><span class="line"><span class="comment">#发现卡在了stat("/proc/sys/fs/binfmt_misc"</span></span><br><span class="line"><span class="comment">#查询后重新挂载该文件</span></span><br><span class="line">systemctl restart proc-sys-fs-binfmt_misc.automount</span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab CI</title>
    <url>/Gitlab_ci.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="安装和部署gitlab-runner"><a class="header-anchor" href="#安装和部署gitlab-runner">¶</a>安装和部署gitlab runner</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gitlab</span></span><br><span class="line"><span class="comment"># 安装gitlb-ci</span></span><br><span class="line"> sudo wget -O /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span><br><span class="line"> sudo chmod +x /usr/<span class="built_in">local</span>/bin/gitlab-runner</span><br><span class="line"> sudo useradd --comment <span class="string">'GitLab Runner'</span> --create-home gitlab-runner --shell /bin/bash</span><br><span class="line"> sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line"> sudo gitlab-runner start</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="注册gitlab-runner"><a class="header-anchor" href="#注册gitlab-runner">¶</a>注册gitlab runner</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注册gitlab ci</span></span><br><span class="line">gitlab-runner register</span><br><span class="line">  <span class="comment">#输入gitlab 的url</span></span><br><span class="line">  <span class="comment">#输入gitlab的token ，将runner注册到项目中</span></span><br><span class="line">  <span class="comment">#输入runner描述</span></span><br><span class="line">  <span class="comment">#输入tag1，tag2……</span></span><br><span class="line">  <span class="comment">#？</span></span><br><span class="line">  <span class="comment">#runner是否单独为该项目服务</span></span><br><span class="line">  <span class="comment"># 选择注册方式 eg:shell</span></span><br><span class="line"><span class="comment">#注销gitlab-runner</span></span><br><span class="line">gitlab-runner list</span><br><span class="line"> gitlab-runner unregister -url http://gitlab.example.com.cn/ --token 2418b9431538bca7db6e451a79df69</span><br></pre></td></tr></table></figure><h3 id="常用配置参数"><a class="header-anchor" href="#常用配置参数">¶</a>常用配置参数</h3><ul><li>script: Runner执行的shell脚本</li><li>image：使用docker镜像:image:name</li><li>services：使用 docker services 镜像：services:name</li><li>before_script：</li><li>after_script：</li><li>stages：阶段</li><li>stage：job阶段</li><li>only/except: 创建job的限制</li><li>tag: runner标签</li><li>when：工作时间 when:manual when:delayed</li><li>allow_failure：允许失败</li></ul><h3 id="管道API"><a class="header-anchor" href="#管道API">¶</a>管道API</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取所有管道</span></span><br><span class="line">curl --header <span class="string">"PRIVATE-TOKEN: H6VbQp8cJryYXVmTzj-3"</span> <span class="string">"http://gitlab.example.com.cn/api/v4/projects/91/pipelines"</span> </span><br><span class="line">curl --header <span class="string">"PRIVATE-TOKEN: H6VbQp8cJryYXVmTzj-3"</span> <span class="string">"http://gitlab.example.com.cn/api/v4/projects/91/pipelines?status=success"</span> |python -m json.tool</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取一个管道</span></span><br><span class="line"><span class="comment">#创建一个新管道</span></span><br><span class="line">curl --request POST --header <span class="string">"PRIVATE-TOKEN: H6VbQp8cJryYXVmTzj-3"</span> <span class="string">"http://gitlab.example.com.cn/api/v4/projects/91/pipeline?ref=master"</span> |python -m json.tool</span><br><span class="line"></span><br><span class="line"><span class="comment">#管道运行</span></span><br><span class="line">curl --request POST --header <span class="string">"PRIVATE-TOKEN:  H6VbQp8cJryYXVmTzj-3"</span> <span class="string">"http://gitlab.example.com.cn/api/v4/projects/91/pipelines/91/retry"</span></span><br></pre></td></tr></table></figure><h3 id="我的脚本"><a class="header-anchor" href="#我的脚本">¶</a>我的脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传docker镜像</span></span><br><span class="line">vim .gitlab-ci.ymlvariables:</span><br><span class="line">    MAVEN_OPTS: <span class="string">'-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true'</span></span><br><span class="line">    MAVEN_CLI_OPTS: <span class="string">'--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true'</span></span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    paths:</span><br><span class="line">        - .m2/repository</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">    - build:project</span><br><span class="line">    - build:image</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">build:project:</span><br><span class="line">    stage: build:project</span><br><span class="line">    tags:</span><br><span class="line">        - share-runner</span><br><span class="line">    script:</span><br><span class="line">        - mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line">    only:</span><br><span class="line">        - release</span><br><span class="line">    artifacts:</span><br><span class="line">      name:  <span class="string">"<span class="variable">$&#123;CI_JOB_NAME&#125;</span>_<span class="variable">$&#123;CI_COMMIT_REF_NAME&#125;</span>"</span></span><br><span class="line">      paths:</span><br><span class="line">        - target/*.jar</span><br><span class="line">      expire_in: 1 hours</span><br><span class="line"></span><br><span class="line">build:image:</span><br><span class="line">    stage: build:image</span><br><span class="line">    tags:</span><br><span class="line">        - share-runner</span><br><span class="line">    script:</span><br><span class="line">        - docker info</span><br><span class="line">        - docker login -u <span class="variable">$CI_REGISTRY_USER</span> -p <span class="variable">$CI_REGISTRY_PASSWORD</span> <span class="variable">$CI_REGISTRY</span></span><br><span class="line">        - docker build --pull -t <span class="string">"<span class="variable">$CI_REGISTRY_IMAGE</span>:<span class="variable">$CI_COMMIT_SHA</span>"</span> .</span><br><span class="line">        - docker push <span class="string">"<span class="variable">$CI_REGISTRY_IMAGE</span>:<span class="variable">$CI_COMMIT_SHA</span>"</span></span><br><span class="line">        - docker rmi <span class="string">"<span class="variable">$CI_REGISTRY_IMAGE</span>:<span class="variable">$CI_COMMIT_SHA</span>"</span></span><br><span class="line">    only:</span><br><span class="line">        - release</span><br><span class="line"></span><br><span class="line">vim Dockerfile</span><br><span class="line">FROM java:8-jdk-alpine</span><br><span class="line">ENV PARAMS=<span class="string">""</span></span><br><span class="line">ENV TZ=PRC</span><br><span class="line">RUN ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span><br><span class="line">ADD target/manage.jar app.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"sh"</span>,<span class="string">"-c"</span>,<span class="string">"java <span class="variable">$PARAMS</span> -jar /app.jar"</span>]</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a class="header-anchor" href="#参考文档">¶</a>参考文档</h3><p><a href="https://docs.gitlab.com/ee/ci/quick_start/" target="_blank" rel="noopener">gitlab document</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>打包Python脚本</title>
    <url>/Python_pyinstall.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>将Python脚本打包成可执行文件</p></blockquote><h3 id="下载PyInstaller"><a class="header-anchor" href="#下载PyInstaller">¶</a>下载PyInstaller</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h3 id="打包python程序"><a class="header-anchor" href="#打包python程序">¶</a>打包python程序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#程序目录下运行</span><br><span class="line">pyinstaller -F yourprogram.py</span><br><span class="line">#生成可执行文件</span><br><span class="line">./dist/yourprogram.exe</span><br></pre></td></tr></table></figure><p><a href="https://pyinstaller.readthedocs.io/en/stable/usage.html" target="_blank" rel="noopener">PyInstaller 文档</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks代理服务器</title>
    <url>/Shadowsocks.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="简介"><a class="header-anchor" href="#简介">¶</a>简介</h3><p>http代理服务器，可用来连接INTERNET（国际互联网）和Local Area Network（局域网）</p><h3 id="云服务器"><a class="header-anchor" href="#云服务器">¶</a>云服务器</h3><p><a href="https://www.aliyun.com/product/ecs?spm=5176.224200.selected.1.61926ed6RFeQql" target="_blank" rel="noopener">阿里云ECS</a><br><a href="https://bwh1.net/" target="_blank" rel="noopener">搬瓦工VPS</a></p><h3 id="安装shadowsocks"><a class="header-anchor" href="#安装shadowsocks">¶</a>安装shadowsocks</h3><h4 id="Centos平台"><a class="header-anchor" href="#Centos平台">¶</a>Centos平台</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h4 id="Ubuntu平台"><a class="header-anchor" href="#Ubuntu平台">¶</a>Ubuntu平台</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改配置信息"><a class="header-anchor" href="#修改配置信息">¶</a>修改配置信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,                  <span class="comment">#服务器 IP地址 (IPv4/IPv6)</span></span><br><span class="line">    <span class="string">"server_port"</span>:1080,                   <span class="comment">#服务器监听的端口</span></span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"Shadows_passwd"</span>,        <span class="comment">#密码，自定义</span></span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,              <span class="comment">#加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等</span></span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span>                     <span class="comment">#Linux 内核在3.7+，可以开启 fast_open 以降低延迟</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动shadowsocks"><a class="header-anchor" href="#启动shadowsocks">¶</a>启动shadowsocks</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行shadowsock</span></span><br><span class="line">sssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"><span class="comment">#查看shadowsocks进程命令</span></span><br><span class="line">netstat -ntlp | grep 1080</span><br></pre></td></tr></table></figure><h3 id="Ubuntu平台设置开机自启动"><a class="header-anchor" href="#Ubuntu平台设置开机自启动">¶</a>Ubuntu平台设置开机自启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vim /etc/rc.local </span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a class="header-anchor" href="#使用方式">¶</a>使用方式</h3><ul><li>下载ShadowsocksR客户端</li><li>填写服务器ip、密码、端口</li></ul><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="noopener">GitHub</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 图片压缩</title>
    <url>/Linux_ImageMagick.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="安装ImageMagick"><a class="header-anchor" href="#安装ImageMagick">¶</a>安装ImageMagick</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ImageMagick</span><br></pre></td></tr></table></figure><h3 id="convert命令简介"><a class="header-anchor" href="#convert命令简介">¶</a>convert命令简介</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数 </span></span><br><span class="line">  -resize                <span class="comment">#改变图片尺寸 </span></span><br><span class="line">  -quality 0-100         <span class="comment">#降低图片质量 </span></span><br><span class="line">  -rotate                <span class="comment">#旋转图片</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a class="header-anchor" href="#使用">¶</a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取图片的尺寸</span></span><br><span class="line">  identify test.png</span><br><span class="line"><span class="comment">#修改图片格式</span></span><br><span class="line">  convert test.png test.jpg </span><br><span class="line"><span class="comment">#批量修改图片格式</span></span><br><span class="line">  <span class="keyword">for</span> %f <span class="keyword">in</span> (*.jpg) <span class="keyword">do</span> convert <span class="string">"%f"</span> <span class="string">"%~nf.png"</span> </span><br><span class="line"><span class="comment">#改变图片大小</span></span><br><span class="line">  convert -resize 1024x768  test.jpg   test1.jpg</span><br><span class="line">  convert -sample 50%x50%  test.jpg   test1.jpg</span><br><span class="line"><span class="comment">#图像顺时针旋转270度 </span></span><br><span class="line">  convert -rotate 270 test.jpg   test2.jpg</span><br><span class="line"><span class="comment">#图像的10,80 位置采用60磅的全黑Helvetica字体写上 Hello, World! </span></span><br><span class="line">  convert -fill black -pointsize 60 -font helvetica -draw <span class="string">'text 10,80 "Hello, World!"'</span>  test.jpg  hello.jpg</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="压缩图片脚本"><a class="header-anchor" href="#压缩图片脚本">¶</a>压缩图片脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat convert.sh </span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># &gt;50k</span></span><br><span class="line">find  /png/upload/path/ -regex <span class="string">'.*\(jpg\|JPG\|png\|PNG\|jpeg\)'</span> -size +50k -<span class="built_in">exec</span> convert -resize 350x350 -quality 60 &#123;&#125; &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;100k</span></span><br><span class="line">find  /png/upload/path/ -regex <span class="string">'.*\(jpg\|JPG\|png\|PNG\|jpeg\)'</span> -size +100k -<span class="built_in">exec</span> convert -resize 300x300 -quality 60 &#123;&#125; &#123;&#125; \;</span><br><span class="line">find  /png/upload/path/ -regex <span class="string">'.*\(jpg\|JPG\|png\|PNG\|jpeg\)'</span> -size +100k -<span class="built_in">exec</span> convert -resize 80%x80% -quality 60 &#123;&#125; &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;200k</span></span><br><span class="line">find  /png/upload/path/ -regex <span class="string">'.*\(jpg\|JPG\|png\|PNG\|jpeg\)'</span> -size +200k -<span class="built_in">exec</span> convert -resize 250x250 -quality 60 &#123;&#125; &#123;&#125; \;</span><br><span class="line">find  /png/upload/path/ -regex <span class="string">'.*\(jpg\|JPG\|png\|PNG\|jpeg\)'</span> -size +200k -<span class="built_in">exec</span> convert -resize 70%x70% -quality 60 &#123;&#125; &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置定时任务</span></span><br><span class="line">crontab -l</span><br><span class="line">10 2 * * * bash /root/convert.sh</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="http://url.cn/5EU6ci1" target="_blank" rel="noopener">从60秒到1.44秒网站访问速度41倍优化历程</a><br><a href="http://www.cnblogs.com/robben/p/4315123.html" target="_blank" rel="noopener">linux中convert用法</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 性能分析</title>
    <url>/Linux_performance.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="系统分析"><a class="header-anchor" href="#系统分析">¶</a>系统分析</h3><h4 id="CPU性能分析工具"><a class="header-anchor" href="#CPU性能分析工具">¶</a>CPU性能分析工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#报告CPU状态</span></span><br><span class="line">mpstat </span><br><span class="line"><span class="comment"># 查看CPU硬件</span></span><br><span class="line">lscpu</span><br><span class="line">dmidecode</span><br></pre></td></tr></table></figure><h4 id="内存性能分析工具"><a class="header-anchor" href="#内存性能分析工具">¶</a>内存性能分析工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free</span><br><span class="line">/proc/meminfo</span><br><span class="line">vmstat</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="磁盘性能分析工具"><a class="header-anchor" href="#磁盘性能分析工具">¶</a>磁盘性能分析工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat</span><br><span class="line"><span class="comment"># yum install iotop</span></span><br><span class="line">iotop</span><br><span class="line">sar</span><br><span class="line">  -d  <span class="comment">#查看磁盘I/O</span></span><br><span class="line">  -r  <span class="comment">#查看内存状态</span></span><br><span class="line"><span class="comment">#查找过去某时刻系统进程数最高的时间点与进程数</span></span><br><span class="line">sar -f /var/<span class="built_in">log</span>/sa/sa22 -q | sort -nr -k 3 | more</span><br></pre></td></tr></table></figure><h3 id="软件分析"><a class="header-anchor" href="#软件分析">¶</a>软件分析</h3><h4 id="1dd"><a class="header-anchor" href="#1dd">¶</a>1dd</h4><p>查看程序运行所需共享库的工具<br>ldd是shell脚本，调用id-linux.so模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldd /usr/bin/mysql</span><br></pre></td></tr></table></figure><h4 id="strace和ltrace"><a class="header-anchor" href="#strace和ltrace">¶</a>strace和ltrace</h4><p>系统调用时内核态给用户态提供的一个系统接口<br>使用该接口可从用户态切换到内核态工作<br>strace和ltrace分别用来跟踪进程的系统调用和库函数调用</p><h5 id="strace"><a class="header-anchor" href="#strace">¶</a>strace</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install strace</span><br><span class="line"><span class="comment">#查看脚本运行过程中系统调用的全过程</span></span><br><span class="line">strace ./xxx.py</span><br><span class="line"><span class="comment">#统计多少系统调用</span></span><br><span class="line">strace -c ./xxx.py</span><br><span class="line"><span class="comment">#根据call排序</span></span><br><span class="line">strace -c -S calls ./xxx.py</span><br><span class="line"><span class="comment">#只看一种系统调用</span></span><br><span class="line">strace -c -e open ./xxx.py</span><br></pre></td></tr></table></figure><h5 id="ltrace"><a class="header-anchor" href="#ltrace">¶</a>ltrace</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install ltrace</span><br><span class="line"><span class="comment">#跟踪库函数调用</span></span><br><span class="line">ltrace -cf grep root /etc/passwd</span><br><span class="line"><span class="comment">#跟踪进程的库函数调用</span></span><br><span class="line">ltrace -p pid</span><br></pre></td></tr></table></figure><h4 id="ipcs"><a class="header-anchor" href="#ipcs">¶</a>ipcs</h4><p>多个进程可能需要调用同一个内存内容<br>例如管道：前一个进程输入放入内存，后一个命令读取内存<br>三种进程间通信方法</p><ul><li>semaphores: 信号量</li><li>message queues: 消息队列</li><li>share memory regions: 共享内存段</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看进程通信情况</span></span><br><span class="line">ipcs</span><br><span class="line"><span class="comment">#查看系统最大共享内存</span></span><br><span class="line">ipcs -l -m</span><br><span class="line"><span class="comment">#配置共享内存</span></span><br><span class="line"><span class="comment">#kernel.shmall的单位是page</span></span><br><span class="line">systemctl -w kernel.shmall=262144</span><br><span class="line"><span class="comment">#获取共享内存的key</span></span><br><span class="line">ipcs -m</span><br><span class="line"><span class="comment">#清除共享内存</span></span><br><span class="line">ipcrm -M key</span><br></pre></td></tr></table></figure><h4 id="systemtap"><a class="header-anchor" href="#systemtap">¶</a>systemtap</h4><p>内核态进程跟踪程序<br>主要用于寻找程序的性能瓶颈</p><h3 id="内存相关"><a class="header-anchor" href="#内存相关">¶</a>内存相关</h3><h4 id="内存泄漏"><a class="header-anchor" href="#内存泄漏">¶</a>内存泄漏</h4><p>程序运行中不能正常回收不用的内存，导致内存增长很高<br>内存分析工具:Valgrind</p><h4 id="虚拟内存、物理内存与页缺失"><a class="header-anchor" href="#虚拟内存、物理内存与页缺失">¶</a>虚拟内存、物理内存与页缺失</h4><p>Paging是内存的最小单位，默认一页是4KB<br>虚拟内存：进程申请的内存<br>物理内存：实际分配给进程的内存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看进程的内存</span></span><br><span class="line"><span class="comment">#VSZ：虚拟内存</span></span><br><span class="line"><span class="comment">#RSS：物理内存</span></span><br><span class="line">ps -aux | head -1</span><br></pre></td></tr></table></figure><p>页缺失</p><ul><li>主页缺失<br>进程请求数据不在物理内存中，从磁盘或交换分区换到内存中</li><li>次页缺失<br>第一次物理内存被使用时，物理内存中没有分配</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pidof java:查询java进程的pid号</span></span><br><span class="line"><span class="comment">#查看页缺失情况</span></span><br><span class="line"><span class="comment">#minflt：次页缺失 majflt：主页缺失</span></span><br><span class="line">ps o pid,comm,minflt,majflt `pidof java`</span><br></pre></td></tr></table></figure><h4 id="Out-of-Memory"><a class="header-anchor" href="#Out-of-Memory">¶</a>Out of Memory</h4><p>若发生次页缺失时，系统无法释放物理内存，系统将杀掉进程来释放内存<br>OOM会选择占用内存最多的进程开始kill内存，易kill掉关键进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#发生oom时，让kernel panic</span></span><br><span class="line"><span class="comment">#若发生OOM Killer，需评估是狗需增加内存</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/panic_on_oom</span><br></pre></td></tr></table></figure><h4 id="Overcommit"><a class="header-anchor" href="#Overcommit">¶</a>Overcommit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#控制内存的申请</span></span><br><span class="line">cat /proc/sys/vm/overcommit_memory</span><br><span class="line"><span class="comment">#0：默认模式，可能发生OOM</span></span><br><span class="line"><span class="comment">#1：完全响应内存申请，不管资源剩余</span></span><br><span class="line"><span class="comment">#2：不允许进程申请超多系统设置大小的内存空间</span></span><br></pre></td></tr></table></figure><h4 id="cache和buffer"><a class="header-anchor" href="#cache和buffer">¶</a>cache和buffer</h4><p>buffer：磁盘文件的索引缓存<br>cache：文件内容缓存</p><h3 id="磁盘相关"><a class="header-anchor" href="#磁盘相关">¶</a>磁盘相关</h3><h4 id="HDD磁盘调度算法"><a class="header-anchor" href="#HDD磁盘调度算法">¶</a>HDD磁盘调度算法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调度算法</span></span><br><span class="line"><span class="comment">#noop(无操作等待算法)：不干预I/O请求，适用于SAN的场景</span></span><br><span class="line"><span class="comment">#anticipatory(预期算法)：将I/O请求放入队列合并成顺序I/O再完成请求，适用于持续大量顺序I/O场景</span></span><br><span class="line"><span class="comment">#deadline(最后期限)：将I/O请求放入队列不处理，等I/O足够多合并一个I/O请求，适用于虚拟化的物理机和数据库服务器</span></span><br><span class="line"><span class="comment">#cfq(完全公平队列)：对每个进程的I/O请求公平处理，适用于随机读取，比如文件服务器</span></span><br><span class="line"><span class="comment">#修改调度算法</span></span><br><span class="line"><span class="built_in">echo</span> cfq &gt; /sys/block/sda/queue/scheduler</span><br></pre></td></tr></table></figure><h4 id="文件系统的日志"><a class="header-anchor" href="#文件系统的日志">¶</a>文件系统的日志</h4><p>日志写入方式</p><ul><li>ordered：默认方式，文件系统性能和数据安全性相对均衡</li><li>writeback：较好的磁盘性能，数据安全性无法保证</li><li>journal：数据安全，性能最差</li></ul><h3 id="系统资源限制"><a class="header-anchor" href="#系统资源限制">¶</a>系统资源限制</h3><p>早期用ulimit限制资源使用，后来引入cgroup加强限制进程的资源使用</p><h4 id="ulimit"><a class="header-anchor" href="#ulimit">¶</a>ulimit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看ulimit配置文件</span></span><br><span class="line">cat /etc/security/limits.conf </span><br><span class="line"><span class="comment">#查看ulimit 设置情况</span></span><br><span class="line"><span class="built_in">ulimit</span> -a</span><br><span class="line"><span class="comment">#设置虚拟内存</span></span><br><span class="line"><span class="built_in">ulimit</span> -v  1048576</span><br></pre></td></tr></table></figure><h4 id="cgroup"><a class="header-anchor" href="#cgroup">¶</a>cgroup</h4><p>新的资源限制方式</p><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="https://blog.csdn.net/u011630575/article/details/71215479" target="_blank" rel="noopener">系统级性能分析工具–Systemtap</a><br><a href="https://sourceware.org/systemtap/documentation.html" target="_blank" rel="noopener">systemtap官网</a><br><a href="https://blog.csdn.net/u010318270/article/details/70864772" target="_blank" rel="noopener">Valgrind的用法</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>SmokePing 部署实践</title>
    <url>/SmokePing.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="SmokePing简介"><a class="header-anchor" href="#SmokePing简介">¶</a>SmokePing简介</h3><ul><li>使用perl开发</li><li>Smokeping 是一款用于网络性能监测的监控软件</li><li>用于查看网络状况，如延时，丢包率，是否BGP多线等</li><li>rrdtool制图方式，图形化地展示网络的时延情况，可网络的即时通信情况</li></ul><h3 id="安装依赖环境"><a class="header-anchor" href="#安装依赖环境">¶</a>安装依赖环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install  <span class="built_in">bind</span>-utils  wqy*  perl perl-core  perl-Net-Telnet perl-Net-DNS \</span><br><span class="line">perl-LDAP perl-libwww-perl perl-RadiusPerl perl-IO-Socket-SSL \</span><br><span class="line">perl-Socket6 perl-CGI-SpeedyCGI perl-FCGI perl-CGI-SpeedCGI \</span><br><span class="line">perl-Time-HiRes perl-ExtUtils-MakeMaker perl-RRD-Simple \</span><br><span class="line">perl-CGI perl-Net-OpenSSH  perl-Sys-Syslog  \</span><br><span class="line">curl fping echoping   gcc make  wget libxml2-devel \</span><br><span class="line">libpng-devel glib pango pango-devel freetype freetype-devel fontconfig \</span><br><span class="line">cairo cairo-devel libart_lgpl libart_lgpl-devel mod_fastcgi screen</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装-RRDtool"><a class="header-anchor" href="#安装-RRDtool">¶</a>安装 RRDtool</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install rrdtool perl-rrdtool</span><br></pre></td></tr></table></figure><h3 id="安装-FPing"><a class="header-anchor" href="#安装-FPing">¶</a>安装 FPing</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://www.fping.org/dist/fping-4.0.tar.gz</span><br><span class="line">tar xvf fping-4.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> fping-4.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/fping</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-apache"><a class="header-anchor" href="#安装-apache">¶</a>安装 apache</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install httpd httpd-devel</span><br></pre></td></tr></table></figure><h3 id="安装-smokeping"><a class="header-anchor" href="#安装-smokeping">¶</a>安装 smokeping</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/ </span><br><span class="line">wget https://oss.oetiker.ch/smokeping/pub/smokeping-2.7.1.tar.gz</span><br><span class="line">tar xvf smokeping-2.7.1.tar.gz </span><br><span class="line"><span class="built_in">cd</span> smokeping-2.7.1/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/smokeping</span><br><span class="line">gmake install</span><br></pre></td></tr></table></figure><h3 id="配置-smokeping-相关文件"><a class="header-anchor" href="#配置-smokeping-相关文件">¶</a>配置 smokeping 相关文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/smokeping/</span><br><span class="line">mkdir cache data var</span><br><span class="line">touch /var/<span class="built_in">log</span>/smokeping.log</span><br><span class="line">chown apache.apache cache/ data/ var/ /var/<span class="built_in">log</span>/smokeping.log</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/smokeping/htdocs/</span><br><span class="line">cp smokeping.fcgi.dist smokeping.fcgi</span><br><span class="line">cp /usr/<span class="built_in">local</span>/smokeping/etc/config.dist /usr/<span class="built_in">local</span>/smokeping/etc/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 /usr/local/smokeping/etc/config 文件</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/smokeping/etc/config</span><br><span class="line"><span class="comment"># 修改 cgiurl</span></span><br><span class="line">sed -i <span class="string">'s#some.url#10.10.0.1#'</span> /usr/<span class="built_in">local</span>/smokeping/etc/config</span><br><span class="line"><span class="comment"># 默认检测时间 300 秒修改 60 秒</span></span><br><span class="line">sed -i <span class="string">'s#300#60#g'</span> /usr/<span class="built_in">local</span>/smokeping/etc/config        </span><br><span class="line"><span class="comment"># 默认 60 秒 ping 20 次，修改为 60 秒 ping 60 次</span></span><br><span class="line">sed -i <span class="string">'s#pings    = 20#pings    = 60#'</span> /usr/<span class="built_in">local</span>/smokeping/etc/config</span><br><span class="line"><span class="comment">#修改fping位置</span></span><br><span class="line">binary = /usr/<span class="built_in">local</span>/fping/sbin/fping</span><br><span class="line"><span class="comment"># 在 presentation 后添加 utf-8 中文字符集           </span></span><br><span class="line">*** Presentation ***</span><br><span class="line">charset = utf-8</span><br><span class="line"><span class="comment"># 修改密码文件权限</span></span><br><span class="line">chmod 600 /usr/<span class="built_in">local</span>/smokeping/etc/smokeping_secrets.dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动smokeping</span></span><br><span class="line">/usr/<span class="built_in">local</span>/smokeping/bin/smokeping</span><br></pre></td></tr></table></figure><h3 id="配置apache"><a class="header-anchor" href="#配置apache">¶</a>配置apache</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置密码登陆</span></span><br><span class="line">htpasswd -c /usr/<span class="built_in">local</span>/smokeping/htdocs/htpasswd admin</span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#DocumentRoot "/var/www/html" 下添加如下内容</span></span><br><span class="line">Alias /cache <span class="string">"/usr/local/smokeping/cache/"</span></span><br><span class="line">Alias /css <span class="string">"/usr/local/smokeping/htdocs/css/"</span></span><br><span class="line">Alias /js <span class="string">"/usr/local/smokeping/htdocs/js/"</span></span><br><span class="line">Alias /cropper <span class="string">"/usr/local/smokeping/htdocs/cropper/"</span></span><br><span class="line">Alias /smokeping <span class="string">"/usr/local/smokeping/htdocs/smokeping.fcgi"</span></span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/usr/local/smokeping"</span>&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options All</span><br><span class="line">    AddHandler cgi-script .fcgi .cgi</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    AuthName <span class="string">"Smokeping"</span></span><br><span class="line">    AuthType Basic</span><br><span class="line">    AuthUserFile /usr/<span class="built_in">local</span>/smokeping/htdocs/htpasswd</span><br><span class="line">    Require valid-user</span><br><span class="line">    DirectoryIndex smokeping.fcgi</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动httpd</span></span><br><span class="line">systemctl start httpd</span><br></pre></td></tr></table></figure><h3 id="安全设置"><a class="header-anchor" href="#安全设置">¶</a>安全设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启80端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h3 id="添加监控节点"><a class="header-anchor" href="#添加监控节点">¶</a>添加监控节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># + 是第一层，++ 是第二层，+++ 是第三层</span></span><br><span class="line"><span class="comment"># 必须重启 smokeping 程序，配置才会生效 </span></span><br><span class="line"></span><br><span class="line">vim /usr/<span class="built_in">local</span>/smokeping/etc/config</span><br><span class="line">+ Other</span><br><span class="line">menu = 三大网络监控</span><br><span class="line">title = 监控统计</span><br><span class="line"></span><br><span class="line">++ CT</span><br><span class="line"></span><br><span class="line">menu = 电信网络监控</span><br><span class="line">title = 电信网络监控列表</span><br><span class="line">host = /Other/CT/CT-BJ /Other/CT/CT-TJ</span><br><span class="line"></span><br><span class="line">+++ CT-BJ</span><br><span class="line"></span><br><span class="line">menu = 北京电信</span><br><span class="line">title = 北京电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.96.199.133</span><br><span class="line"></span><br><span class="line">+++ CT-TJ</span><br><span class="line"></span><br><span class="line">menu = 天津电信</span><br><span class="line">title = 天津电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 219.150.32.132</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动smokeping</span></span><br><span class="line">/usr/<span class="built_in">local</span>/smokeping/bin/smokeping</span><br></pre></td></tr></table></figure><h3 id="结果"><a class="header-anchor" href="#结果">¶</a>结果</h3><p><img src="https://ws1.sinaimg.cn/large/006Xrlj6gy1fq5b7xu9ouj30q306hmxt.jpg" alt><br><img src="https://ws1.sinaimg.cn/large/006Xrlj6gy1fq5b88zu4ej30ri08pwf5.jpg" alt></p><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="http://jaminzhang.github.io/monitoring/smokeping-deploy-practice/#top15" target="_blank" rel="noopener">SmokePing 部署实践</a><br><a href="https://oss.oetiker.ch/smokeping/doc/smokeping_install.en.html" target="_blank" rel="noopener">smokeping_install</a><br><a href="https://oss.oetiker.ch/smokeping/pub/" target="_blank" rel="noopener">smokeping package</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible 进行项目自动部署（tomcat）</title>
    <url>/Devops_Ansible_tomcat_deplay.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>通过Ansible来安装tomcat并部署新程序</p></blockquote><h3 id="主机清单"><a class="header-anchor" href="#主机清单">¶</a>主机清单</h3><ul><li>10.10.0.1:ansible master</li><li>10.10.0.2:ansible agent</li><li>10.10.0.3:ansible agent</li></ul><h3 id="安装环境"><a class="header-anchor" href="#安装环境">¶</a>安装环境</h3><ul><li>centos7</li><li>java-1.8.0-openjdk</li><li>tomcat-8.5.29</li></ul><h3 id="设置组变量"><a class="header-anchor" href="#设置组变量">¶</a>设置组变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tomcat_path: /usr/<span class="built_in">local</span>/apache-tomcat-8.5.29</span><br><span class="line">tomcat_http_port: 80</span><br><span class="line">tomcat_app: /usr/<span class="built_in">local</span>/apache-tomcat-8.5.29/webapps/<span class="built_in">test</span></span><br><span class="line">tocmat_app_index: index.jsp</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装jdk"><a class="header-anchor" href="#安装jdk">¶</a>安装jdk</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: install java 1.8</span><br><span class="line">  yum: name=java-1.8.0-openjdk state=present</span><br></pre></td></tr></table></figure><h3 id="打开防火墙端口"><a class="header-anchor" href="#打开防火墙端口">¶</a>打开防火墙端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: open port 80</span><br><span class="line">  firewalld: port=80/tcp permanent=<span class="literal">true</span> state=enabled immediate=yes</span><br><span class="line">  when: <span class="string">"ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"</span></span><br><span class="line"></span><br><span class="line">- name: open port 8080</span><br><span class="line">  firewalld: port=8080/tcp permanent=<span class="literal">true</span> state=enabled immediate=yes</span><br><span class="line">  when: <span class="string">"ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"</span></span><br><span class="line">  notify: restart firewalld</span><br></pre></td></tr></table></figure><h3 id="添加tomcat启动脚本"><a class="header-anchor" href="#添加tomcat启动脚本">¶</a>添加tomcat启动脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: Install Tomcat init script</span><br><span class="line">  copy: src=tomcat-initscript.sh dest=/etc/init.d/tomcat mode=0755</span><br></pre></td></tr></table></figure><h3 id="安装tomcat"><a class="header-anchor" href="#安装tomcat">¶</a>安装tomcat</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: download tomcat</span><br><span class="line">  get_url:</span><br><span class="line">    url: http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.29/bin/apache-tomcat-8.5.29.tar.gz</span><br><span class="line">    dest: /tmp/apache-tomcat-8.5.29.tar.gz</span><br><span class="line"></span><br><span class="line">- name: unzip tomcat</span><br><span class="line">  unarchive:</span><br><span class="line">    src: /tmp/apache-tomcat-8.5.29.tar.gz  </span><br><span class="line">    dest: /usr/<span class="built_in">local</span>/</span><br><span class="line">    remote_src: yes</span><br><span class="line">  notify: restart tomcat</span><br></pre></td></tr></table></figure><h3 id="删除旧项目"><a class="header-anchor" href="#删除旧项目">¶</a>删除旧项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: remove old app</span><br><span class="line">  file: </span><br><span class="line">    path: <span class="string">"&#123;&#123; tomcat_path &#125;&#125;/webapps/&#123;&#123; tomcat_app &#125;&#125;"</span></span><br><span class="line">    state: absent</span><br></pre></td></tr></table></figure><h3 id="添加新项目"><a class="header-anchor" href="#添加新项目">¶</a>添加新项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: deplay new app</span><br><span class="line">  copy: src=test.war dest=&#123;&#123; tomcat_path &#125;&#125;/webapps/</span><br></pre></td></tr></table></figure><h3 id="替换配置文件"><a class="header-anchor" href="#替换配置文件">¶</a>替换配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据项目实际情况替换</span></span><br><span class="line">- name: conf change</span><br><span class="line">  template:</span><br><span class="line">    src: <span class="string">"&#123;&#123; item.src &#125;&#125;"</span></span><br><span class="line">    dest: <span class="string">"&#123;&#123; item.dest &#125;&#125;"</span></span><br><span class="line">  with_items:</span><br><span class="line">    - &#123;</span><br><span class="line">      src: server.xml.j2,</span><br><span class="line">      dest: <span class="string">"&#123;&#123; tomcat_path &#125;&#125;/conf/server.xml"</span></span><br><span class="line">      &#125;</span><br><span class="line">    - &#123;</span><br><span class="line">      src: web.xml.j2,</span><br><span class="line">      dest: <span class="string">"&#123;&#123; tomcat_path &#125;&#125;/conf/web.xml"</span></span><br><span class="line">      &#125;</span><br><span class="line">  notify: restart tomcat</span><br></pre></td></tr></table></figure><h3 id="ansible测试"><a class="header-anchor" href="#ansible测试">¶</a>ansible测试</h3><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="https://github.com/Lianyi-xz/ansible-examples/tree/master/tomcat-install" target="_blank" rel="noopener">我的脚本-tomcat部署</a><br><a href="https://github.com/Lianyi-xz/ansible-examples/tree/master/tomcat-deplay" target="_blank" rel="noopener">我的脚本-项目发布</a><br><a href="https://github.com/Lianyi-xz/ansible-examples/tree/master/zabbix" target="_blank" rel="noopener">我的zabbix部署脚本</a><br><a href="https://github.com/ansible/ansible-examples" target="_blank" rel="noopener">ansible-examples</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible 添加ssh授权</title>
    <url>/Ansible_authorized.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="生成ssh"><a class="header-anchor" href="#生成ssh">¶</a>生成ssh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -P <span class="string">''</span> -f /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="添加主机"><a class="header-anchor" href="#添加主机">¶</a>添加主机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim hosts</span><br><span class="line">[centos]</span><br><span class="line">10.10.0.129  ansible_ssh_pass=123456</span><br><span class="line">10.10.0.135  ansible_ssh_pass=123456</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置playbook"><a class="header-anchor" href="#配置playbook">¶</a>配置playbook</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">--</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">centos</span>     <span class="comment">#执行脚本的主机</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span>   <span class="comment">#不采集目标系统</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ANSIBLE_HOST_KEY_CHECKING</span>   <span class="comment">#不检查key</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">export</span> <span class="string">ANSIBLE_HOST_KEY_CHECKING=False</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">ssh</span> <span class="string">key</span></span><br><span class="line">    <span class="attr">authorized_key:</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">"<span class="template-variable">&#123;&#123; lookup('file', '/root/.ssh/id_rsa.pub') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a class="header-anchor" href="#运行">¶</a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i hosts main.yml</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="https://github.com/Lianyi-xz/ansible-examples/tree/master/auto-key" target="_blank" rel="noopener">我的脚本</a><br><a href="http://docs.ansible.com/ansible/latest/authorized_key_module.html" target="_blank" rel="noopener">authorized_key模块</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos6 文件(ext4)恢复</title>
    <url>/Linux_ext4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>ext4文件系统上恢复删除文件(extundelete)<br>ext3文件系统上恢复删除文件(ext3grep)</p></blockquote><h3 id="linux-文件系统简介"><a class="header-anchor" href="#linux-文件系统简介">¶</a>linux 文件系统简介</h3><table><thead><tr><th style="text-align:center">super block</th><th style="text-align:center">inode</th><th style="text-align:center">block</th></tr></thead><tbody><tr><td style="text-align:center">记录inode和block信息</td><td style="text-align:center">记录某文件权限、属性、block号码</td><td style="text-align:center">记录某文件实际数据</td></tr></tbody></table><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">ls -i  a.txt</span><br><span class="line"><span class="comment">#查看文件inode号</span></span><br><span class="line">ls -i a.txt</span><br><span class="line"><span class="comment">#查看inode中包含的内容</span></span><br><span class="line"><span class="built_in">stat</span> a.txt</span><br></pre></td></tr></table></figure><h3 id="extundelete简介"><a class="header-anchor" href="#extundelete简介">¶</a>extundelete简介</h3><ul><li>extundelete通过inode来获得当前文件系统下所有文件的信息（包括存在的和已经删除的文件)</li><li>extundelete使用inode信息结合日志去查询该inode所在的block位置，包括直接块，间接块等信息</li><li>extundelete使用dd命令将这些信息备份出来，从而恢复数据文件</li><li>extundelete在恢复文件的时候不能自动创建空文件和目录</li><li>文件误删除后第一时间卸载或以只读的方式挂载</li></ul><h3 id="安装extundelete"><a class="header-anchor" href="#安装extundelete">¶</a>安装extundelete</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">yum install e2fsprogs-devel</span><br><span class="line"><span class="comment">#解压压缩包</span></span><br><span class="line">tar jxvf extundelete-0.2.4.tar.bz2 </span><br><span class="line"><span class="comment">#安装 extundelete</span></span><br><span class="line"><span class="built_in">cd</span> extundelete-0.2.4</span><br><span class="line"> ./configure --prefix=/usr/<span class="built_in">local</span>/extundelete </span><br><span class="line"> make  -j 4 </span><br><span class="line"> make install </span><br><span class="line"> <span class="comment">#验证</span></span><br><span class="line"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/extundelete/bin   </span><br><span class="line">./extundelete -v  </span><br><span class="line"> <span class="comment">#添加环境变量</span></span><br><span class="line"> vim /etc/profile </span><br><span class="line"> <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/extundelete/bin:<span class="variable">$PATH</span> </span><br><span class="line"> <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="安装-psmisc"><a class="header-anchor" href="#安装-psmisc">¶</a>安装 psmisc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install psmisc</span><br><span class="line"><span class="comment">#强制卸载被占用的分区</span></span><br><span class="line">fuser -k 挂载点</span><br></pre></td></tr></table></figure><h3 id="extundelete用法详解"><a class="header-anchor" href="#extundelete用法详解">¶</a>extundelete用法详解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#命令格式：</span></span><br><span class="line">  extundelete [options] [action] device-file</span><br><span class="line"><span class="comment">#option</span></span><br><span class="line">  --version, -[vV]，显示软件版本号。</span><br><span class="line">  --<span class="built_in">help</span>，显示软件帮助信息。</span><br><span class="line">  --superblock，显示超级块信息。</span><br><span class="line">  --journal，显示日志信息。</span><br><span class="line">  --after dtime，时间参数，表示在某段时间之后被删的文件或目录。</span><br><span class="line">  --before dtime，时间参数，表示在某段时间之前被删的文件或目录</span><br><span class="line"><span class="comment">#action</span></span><br><span class="line">  --inode ino，显示某节点“ino”的信息，ext4文件系统的分区根目录的inode值为2，xfs分区根目录的inode值为64。 </span><br><span class="line">  --block blk，显示数据块“blk”的信息。</span><br><span class="line">  --restore-inode ino[,ino,...]，恢复命令参数，表示恢复节点“ino”的文件，恢复的文件会自动放在当前目录下的RESTORED_FILES文件夹中，使用节点编号作为扩展名。</span><br><span class="line">  --restore-file <span class="string">'path'</span>，恢复命令参数，表示将恢复指定路径的文件，并把恢复的文件放在当前目录下的RECOVERED_FILES目录中。</span><br><span class="line">  --restore-files <span class="string">'path'</span>，恢复命令参数，表示将恢复在路径中已列出的所有文件。</span><br><span class="line">  --restore-all，恢复命令参数，表示将尝试恢复所有目录和文件。</span><br><span class="line">  -j journal，表示从已经命名的文件中读取扩展日志。</span><br><span class="line">  -b blocknumber，表示使用之前备份的超级块来打开文件系统，一般用于查看现有超级块是不是当前所要的文件。</span><br><span class="line">  -B blocksize，表示使用数据块大小来打开文件系统，一般用于查看已经知道大小的文件。</span><br></pre></td></tr></table></figure><h3 id="extundlete恢复数据"><a class="header-anchor" href="#extundlete恢复数据">¶</a>extundlete恢复数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看分区信息</span></span><br><span class="line">df -T</span><br><span class="line">  /dev/sda4     ext4      41152832 13145604  25893744  34% /home</span><br><span class="line"><span class="comment">#卸载分区</span></span><br><span class="line">umount /home/   <span class="comment">#如果卸载失败，就用命令"fuser -k /home"结束使用此分区的进程树</span></span><br><span class="line"><span class="comment">#进入存放恢复数据目录</span></span><br><span class="line"><span class="built_in">cd</span> /<span class="built_in">test</span></span><br><span class="line"><span class="comment">#通过inode查看被删除文件名称</span></span><br><span class="line">extundelete /dev/sda4 --inode 2</span><br><span class="line">  lost+found                11</span><br><span class="line">  passwd                    12             Deleted</span><br><span class="line">  hosts                     13             Deleted</span><br><span class="line">  a                         7313           Deleted</span><br><span class="line"><span class="comment">#通过inode恢复</span></span><br><span class="line">extundelete /dev/sda4 --restore-inode 12</span><br><span class="line">  /<span class="built_in">test</span>/RECOVERED_FILES/file.12    <span class="comment">#文件恢复为</span></span><br><span class="line"><span class="comment">#通过文件名恢复</span></span><br><span class="line">extundelete /dev/sda4 --restore-file passwd  <span class="comment">#文件名为已下载挂载点的相对路径</span></span><br><span class="line">  /<span class="built_in">test</span>/RECOVERED_FILES/passwd </span><br><span class="line"><span class="comment">#通过目录恢复</span></span><br><span class="line">extundelete /dev/sda4 --restore-directory a</span><br><span class="line">  /<span class="built_in">test</span>/RECOVERED_FILES/a/</span><br><span class="line"><span class="comment">#恢复所有文件</span></span><br><span class="line">extundelete /dev/sda4 --restore-all</span><br></pre></td></tr></table></figure><h3 id="恢复根下文件"><a class="header-anchor" href="#恢复根下文件">¶</a>恢复根下文件</h3><ul><li>立即断电，然后把磁盘以只读方式，挂载到另一个电脑中进行恢复</li><li>把extundelete在虚拟机上（虚拟机系统要和服务器版本一样），提前安装好后再复制到U盘中，<br>把U盘插入服务器，恢复时，恢复的文件要保存到U盘中，（不要让恢复的数据写到/下，那样会覆盖之前删除的文件）</li></ul><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="http://linux.vbird.org/linux_basic/0230filesystem.php#harddisk-inode" target="_blank" rel="noopener">鸟哥的linux私房菜</a><br><a href="http://blog.51cto.com/ixdba/1566856" target="_blank" rel="noopener">Linux下高效数据恢复软件extundelete应用实战</a><br><a href="http://extundelete.sourceforge.net/" target="_blank" rel="noopener">extundelete文档</a><br><a href="https://sourceforge.net/projects/extundelete/" target="_blank" rel="noopener">extundelete下载</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Python调用阿里云数据库监控数据</title>
    <url>/Python_aliyun_rds.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><ul><li>基于Python 2.7.5 实现</li><li>抓取公司云数据库监控数据 存入本地数据库</li><li>centos定时任务 每小时执行一次</li></ul><a id="more"></a><h3 id="引入SDK"><a class="header-anchor" href="#引入SDK">¶</a>引入SDK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Python SDK 包</span></span><br><span class="line">pip install aliyun-python-sdk-core-v3</span><br><span class="line">pip install aliyun-python-sdk-rds</span><br></pre></td></tr></table></figure><h3 id="获取json代码"><a class="header-anchor" href="#获取json代码">¶</a>获取json代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from aliyunsdkcore import client</span><br><span class="line">from aliyunsdkrds.request.v20140815 import DescribeRegionsRequest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置访问凭证</span></span><br><span class="line">accessKeyId = <span class="string">'&lt;access-key-id&gt;'</span></span><br><span class="line">accessKeySecret = <span class="string">'&lt;access-key-secret&gt;'</span></span><br><span class="line">client = client.AcsClient(accessKeyId, accessKeySecret,<span class="string">'cn-shanghai'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Request对象，并对其中参数赋值</span></span><br><span class="line">request = DescribeRegionsRequest.DescribeRegionsRequest()</span><br><span class="line"><span class="comment">#设置返回数据格式，默认为XML</span></span><br><span class="line">request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">request.set_action_name(<span class="string">'DescribeDBInstancePerformance'</span>)</span><br><span class="line"><span class="comment">#多个性能指标用 "," 分隔</span></span><br><span class="line">request.set_query_params(dict(DBInstanceId=<span class="string">"数据库实例名"</span>,key=<span class="string">"性能指标"</span>,StartTime=<span class="string">"2018-02-22T05:00Z"</span>,EndTime=<span class="string">"2018-02-22T15:00Z"</span>))</span><br><span class="line"><span class="built_in">print</span>(client.do_action_with_exception(request))</span><br></pre></td></tr></table></figure><h3 id="json转化为sql语句基本思路"><a class="header-anchor" href="#json转化为sql语句基本思路">¶</a>json转化为sql语句基本思路</h3><ul><li>获取返回json数据</li><li>循环PerformanceKeys/PerformanceKey键内array</li><li>将key作为表名</li><li>将其它键作为属性名,并额外添加Date属性</li><li>循环Values/PerformanceValue，将Value和Date值存入数组</li><li>拼接字符串转化成插入sql语句</li></ul><h3 id="json格式"><a class="header-anchor" href="#json格式">¶</a>json格式</h3><p><img src="https://ws1.sinaimg.cn/large/006Xrlj6gy1forhayuth9j30hj0fbt8z.jpg" alt></p><h3 id="转化json代码"><a class="header-anchor" href="#转化json代码">¶</a>转化json代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例数据</span></span><br><span class="line">apidate=&#123;<span class="string">"DBInstanceId"</span>:<span class="string">"rm-test"</span>,<span class="string">"RequestId"</span>:<span class="string">"test"</span>,<span class="string">"PerformanceKeys"</span>:&#123;<span class="string">"PerformanceKey"</span>:[&#123;<span class="string">"Values"</span>:&#123;<span class="string">"PerformanceValue"</span>:[&#123;<span class="string">"Value"</span>:<span class="string">"2624&amp;415&amp;5&amp;0&amp;2204"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:00:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"2624&amp;415&amp;5&amp;0&amp;2204"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:05:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"2624&amp;415&amp;5&amp;0&amp;2204"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:10:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"2624&amp;415&amp;5&amp;0&amp;2204"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:15:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"2624&amp;415&amp;5&amp;0&amp;2204"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:20:33Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"2624&amp;415&amp;5&amp;0&amp;2204"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:25:33Z"</span>&#125;]&#125;,<span class="string">"Key"</span>:<span class="string">"MySQL_DetailedSpaceUsage"</span>,<span class="string">"Unit"</span>:<span class="string">"MB"</span>,<span class="string">"ValueFormat"</span>:<span class="string">"ins_size&amp;data_size&amp;log_size&amp;tmp_size&amp;other_size"</span>&#125;,&#123;<span class="string">"Values"</span>:&#123;<span class="string">"PerformanceValue"</span>:[&#123;<span class="string">"Value"</span>:<span class="string">"0.28"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:00:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"0.26"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:05:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"0.26"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:10:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"0.38"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:15:32Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"0.28"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:20:33Z"</span>&#125;,&#123;<span class="string">"Value"</span>:<span class="string">"0.36"</span>,<span class="string">"Date"</span>:<span class="string">"2018-02-23T08:25:33Z"</span>&#125;]&#125;,<span class="string">"Key"</span>:<span class="string">"MySQL_IOPS"</span>,<span class="string">"Unit"</span>:<span class="string">"int"</span>,<span class="string">"ValueFormat"</span>:<span class="string">"io"</span>&#125;]&#125;,<span class="string">"EndTime"</span>:<span class="string">"2018-02-23T09:41Z"</span>,<span class="string">"StartTime"</span>:<span class="string">"2018-02-23T08:00Z"</span>,<span class="string">"Engine"</span>:<span class="string">"MySQL"</span>&#125;</span><br><span class="line">apikey=apidate[<span class="string">'PerformanceKeys'</span>][<span class="string">'PerformanceKey'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> apikey:</span><br><span class="line">    <span class="comment">#定义表名</span></span><br><span class="line">    tablename=i[<span class="string">"Key"</span>]</span><br><span class="line">    <span class="comment">#定义列名</span></span><br><span class="line">    tablecolumn=i[<span class="string">'ValueFormat'</span>].replace(<span class="string">"&amp;"</span>,<span class="string">","</span>)+<span class="string">",date,unit"</span></span><br><span class="line">    valueunit=i[<span class="string">'Unit'</span>]</span><br><span class="line">    sqlhalf=<span class="string">"INSERT INTO "</span>+tablename+<span class="string">" ("</span>+tablecolumn+<span class="string">") VALUES"</span></span><br><span class="line">    apivalues=i[<span class="string">'Values'</span>][<span class="string">'PerformanceValue'</span>]</span><br><span class="line">    valuelist=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span>  apivalues:</span><br><span class="line">        tablevalue=<span class="string">"("</span>+i[<span class="string">'Value'</span>].replace(<span class="string">"&amp;"</span>,<span class="string">","</span>)+<span class="string">",'"</span>+i[<span class="string">'Date'</span>].replace(<span class="string">"T"</span>,<span class="string">" "</span>).replace(<span class="string">"Z"</span>,<span class="string">" "</span>)+<span class="string">"','"</span>+valueunit+<span class="string">"')"</span></span><br><span class="line">        valuelist.append(tablevalue)</span><br><span class="line">    sql=sqlhalf+<span class="string">","</span>.join(valuelist)+<span class="string">";"</span></span><br><span class="line">    print(sql)</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="https://github.com/Lianyi-xz/shell/blob/master/aliyun_rds.py" target="_blank" rel="noopener">我的代码</a><br><a href="https://help.aliyun.com/document_detail/30003.html" target="_blank" rel="noopener">Python SDK列表</a><br><a href="https://helpcdn.aliyun.com/document_detail/42700.html?spm=a2c4g.11186623.6.608.Sp66kt" target="_blank" rel="noopener">SDK使用参考</a><br><a href="https://help.aliyun.com/document_detail/26316.html?spm=a2c4g.11186623.6.936.jeShyh" target="_blank" rel="noopener">性能参数表</a><br><a href="https://help.aliyun.com/document_detail/26280.html?spm=a2c4g.11186623.6.910.lsLvHa" target="_blank" rel="noopener">实例性能数据返回参数</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Python调用微信公众号后台数据</title>
    <url>/Python_wechat.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><ul><li>基于Python 2.7.5 实现</li><li>抓取公司微信公众号平台数据 存入本地数据库</li><li>centos定时任务 中午12点之后运行</li></ul><a id="more"></a><h3 id="源代码"><a class="header-anchor" href="#源代码">¶</a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment">#get_access_token</span></span><br><span class="line">access_url=<span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential'</span></span><br><span class="line">access_data=&#123;<span class="string">'appid'</span>:<span class="string">'xxxx'</span>,</span><br><span class="line">    <span class="string">'secret'</span>:<span class="string">'xxxxxx'</span>&#125;</span><br><span class="line">access_data=urllib.urlencode(access_data)</span><br><span class="line"></span><br><span class="line">weixin_token=json.loads(urllib.urlopen(access_url,access_data).read())[<span class="string">'access_token'</span>]</span><br><span class="line">get_date=(datetime.now()-timedelta(days=<span class="number">1</span>)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">users_token=&#123;<span class="string">'access_token'</span>:<span class="string">"%s"</span> % weixin_token&#125;</span><br><span class="line">users_date=&#123;<span class="string">'begin_date'</span>:<span class="string">'%s'</span> %(get_date),</span><br><span class="line">      <span class="string">'end_date'</span>:<span class="string">'%s'</span> %(get_date)&#125;</span><br><span class="line"><span class="comment">#users_date=&#123;'begin_date':'2017-11-04',</span></span><br><span class="line"><span class="comment">#        'end_date':'2017-11-04'&#125;</span></span><br><span class="line"></span><br><span class="line">api=[<span class="string">'getarticlesummary'</span>,<span class="string">'getuserread'</span>,<span class="string">'getuserreadhour'</span>,<span class="string">'getusershare'</span>,<span class="string">'getusersharehour'</span>,<span class="string">'getusersummary'</span>,<span class="string">'getusercumulate'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> api:</span><br><span class="line">  api_url=<span class="string">'https://api.weixin.qq.com/datacube/&#123;:s&#125;'</span>. format(i)</span><br><span class="line">  ans=requests.post(api_url,params=users_token,json=users_date)</span><br><span class="line">  json_ans=json.loads(ans.text)</span><br><span class="line">  names=locals()</span><br><span class="line">  names[<span class="string">'%s'</span> % i] = json_ans</span><br><span class="line"></span><br><span class="line">getarticletotal=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">  api_url=<span class="string">'https://api.weixin.qq.com/datacube/getarticletotal'</span></span><br><span class="line">  get_date=(datetime.now()-timedelta(days=<span class="number">7</span>-i)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">  users_date=&#123;<span class="string">'begin_date'</span>:<span class="string">'%s'</span> %(get_date),<span class="string">'end_date'</span>:<span class="string">'%s'</span> %(get_date)&#125;</span><br><span class="line">  ans=requests.post(api_url,params=users_token,json=users_date)</span><br><span class="line">  json_ans=json.loads(ans.text)</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> json_ans[<span class="string">'list'</span>]:</span><br><span class="line">    getarticletotal.append(j)</span><br><span class="line"></span><br><span class="line"><span class="comment">#connect mysql</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  conn = MySQLdb.connect (host = <span class="string">"192.168.0.1"</span>,</span><br><span class="line">                           user = <span class="string">"root"</span>,</span><br><span class="line">                           passwd = <span class="string">"root123"</span>,</span><br><span class="line">                           db = <span class="string">"os_system"</span>,</span><br><span class="line">                           charset=<span class="string">"utf8"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">  print(e)</span><br><span class="line">  sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert article_summary</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getarticlesummary[<span class="string">'list'</span>]:</span><br><span class="line">  cursor =  conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_articlesummary values('%s','%s','%s',%d,%d,%d,%d,%d,%d,%d,%d)"</span> %(</span><br><span class="line">        i[<span class="string">'msgid'</span>],</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'title'</span>],</span><br><span class="line">        i[<span class="string">'int_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'int_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'ori_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'ori_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'share_user'</span>],</span><br><span class="line">        i[<span class="string">'share_count'</span>],</span><br><span class="line">        i[<span class="string">'add_to_fav_user'</span>],</span><br><span class="line">        i[<span class="string">'add_to_fav_count'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert article_total</span></span><br><span class="line"><span class="comment">#get 7time</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getarticletotal:</span><br><span class="line">  cursor =  conn.cursor ()</span><br><span class="line"><span class="comment">#  delete="delete from wechat_articletotal where msgid='%s'" %(i['msgid'])</span></span><br><span class="line"><span class="comment">#  cursor.execute(delete)</span></span><br><span class="line">  insert=<span class="string">"insert into wechat_articletotal values('%s','%s','%s','%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)"</span> %(</span><br><span class="line">        i[<span class="string">'msgid'</span>],</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'stat_date'</span>],</span><br><span class="line">        i[<span class="string">'title'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'target_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'ori_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'ori_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'share_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'share_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'add_to_fav_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'add_to_fav_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_session_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_session_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_hist_msg_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_feed_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_friends_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_friends_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_friends_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_friends_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_other_read_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'int_page_from_other_read_count'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'feed_share_from_session_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'feed_share_from_session_cnt'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'feed_share_from_feed_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'feed_share_from_feed_cnt'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'feed_share_from_other_user'</span>],</span><br><span class="line">        i[<span class="string">'details'</span>][<span class="number">-1</span>][<span class="string">'feed_share_from_other_cnt'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert user_read</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getuserread[<span class="string">'list'</span>]:</span><br><span class="line">  cursor =  conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_userread values('%s',%d,%d,%d,%d,%d,%d,%d,%d,%d)"</span> %(</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'user_source'</span>],</span><br><span class="line">        i[<span class="string">'int_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'int_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'ori_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'ori_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'share_user'</span>],</span><br><span class="line">        i[<span class="string">'share_count'</span>],</span><br><span class="line">        i[<span class="string">'add_to_fav_user'</span>],</span><br><span class="line">        i[<span class="string">'add_to_fav_count'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert user_read_hour</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getuserreadhour[<span class="string">'list'</span>]:</span><br><span class="line">  cursor =  conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_userreadhour values('%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)"</span> %(</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'ref_hour'</span>],</span><br><span class="line">        i[<span class="string">'user_source'</span>],</span><br><span class="line">        i[<span class="string">'int_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'int_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'ori_page_read_user'</span>],</span><br><span class="line">        i[<span class="string">'ori_page_read_count'</span>],</span><br><span class="line">        i[<span class="string">'share_user'</span>],</span><br><span class="line">        i[<span class="string">'share_count'</span>],</span><br><span class="line">        i[<span class="string">'add_to_fav_user'</span>],</span><br><span class="line">        i[<span class="string">'add_to_fav_count'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert user_share</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getusershare[<span class="string">'list'</span>]:</span><br><span class="line">  cursor =  conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_usershare values('%s',%d,%d,%d)"</span> %(</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'share_scene'</span>],</span><br><span class="line">        i[<span class="string">'share_count'</span>],</span><br><span class="line">        i[<span class="string">'share_user'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert user_share_hour</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getusersharehour[<span class="string">'list'</span>]:</span><br><span class="line">  cursor =  conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_usersharehour values('%s',%d,%d,%d,%d)"</span> %(</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'ref_hour'</span>],</span><br><span class="line">        i[<span class="string">'share_scene'</span>],</span><br><span class="line">        i[<span class="string">'share_count'</span>],</span><br><span class="line">        i[<span class="string">'share_user'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert user_summary</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getusersummary[<span class="string">'list'</span>]:</span><br><span class="line">  summary_user=<span class="string">'&#123;"user_source": %d,"new_user":%d,"cancel_user":%d&#125;'</span> %(</span><br><span class="line">        i[<span class="string">'user_source'</span>],</span><br><span class="line">        i[<span class="string">'new_user'</span>],</span><br><span class="line">        i[<span class="string">'cancel_user'</span>])</span><br><span class="line">  cursor = conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_usersummary  values('%s','%s')"</span> %(</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        summary_user)</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert user_cumulate</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> getusercumulate[<span class="string">'list'</span>]:</span><br><span class="line">  cursor = conn.cursor ()</span><br><span class="line">  insert=<span class="string">"insert into wechat_usercumulate  values('%s',%d)"</span> %(</span><br><span class="line">        i[<span class="string">'ref_date'</span>],</span><br><span class="line">        i[<span class="string">'cumulate_user'</span>])</span><br><span class="line">  cursor.execute(insert)</span><br><span class="line">  cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#close mysql</span></span><br><span class="line">conn.commit()</span><br><span class="line">conn.close ()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现SQL数据转化为json格式</title>
    <url>/Python_sql_to_json.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>基于Python 2.7.5 实现</p></blockquote><h3 id="基本思路"><a class="header-anchor" href="#基本思路">¶</a>基本思路</h3><ul><li>连接mysql数据库</li><li>查询表数据</li><li>查询表结构</li><li>按行循环表数据</li><li>按行表数据与表结构对应 存入字典中</li><li>将字典存入list中，然后将list转化为json格式</li></ul><a id="more"></a><h3 id="源代码"><a class="header-anchor" href="#源代码">¶</a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理data类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_handler</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(obj, <span class="string">'isoformat'</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.isoformat()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        conn = MySQLdb.connect (host = <span class="string">"192.168.0.1"</span>,</span><br><span class="line">                           user = <span class="string">"root"</span>,</span><br><span class="line">                           passwd = <span class="string">"root123"</span>,</span><br><span class="line">                           db = <span class="string">"os_system"</span>,</span><br><span class="line">                           charset=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">     print(e)</span><br><span class="line">     sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询数据</span></span><br><span class="line">select_cursor = conn.cursor ()</span><br><span class="line">selectsql=<span class="string">"select * from os_status limit 10"</span></span><br><span class="line">select_cursor.execute(selectsql)</span><br><span class="line"><span class="comment">#获取表数据</span></span><br><span class="line">sql_data=select_cursor.fetchall()</span><br><span class="line"><span class="comment">#获取表结构</span></span><br><span class="line">fields=select_cursor.description </span><br><span class="line">select_cursor.close()</span><br><span class="line"><span class="comment">#关闭数据库连接</span></span><br><span class="line">conn.commit()</span><br><span class="line">conn.close ()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义表结构的列表</span></span><br><span class="line">column_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取字段，追加到列表中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fields:</span><br><span class="line">  column_list.append(i[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#按行将数据存入数组中，并转换为json格式</span></span><br><span class="line"><span class="comment">#column_size = len(column_list)</span></span><br><span class="line"><span class="comment">#定义存储sql数据的list</span></span><br><span class="line">sql_list=[]</span><br><span class="line"><span class="comment">#按行对sql数据进行循环</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sql_data:</span><br><span class="line">  <span class="comment">#表数据与表结构对应 存入字典中</span></span><br><span class="line">  result = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(row)):</span><br><span class="line">    result[column_list[i]] = row[i]</span><br><span class="line">  <span class="comment">#字典存入list中</span></span><br><span class="line">  sql_list.append(result)</span><br><span class="line"><span class="comment">#输出json</span></span><br><span class="line">print(json.dumps(sql_list,default=date_handler))</span><br></pre></td></tr></table></figure><h3 id="优化"><a class="header-anchor" href="#优化">¶</a>优化</h3><ul><li>将数据存入文件中</li><li>增加用户交互，编辑连接数据库及sql语句</li></ul><h3 id="python2-连接mysql"><a class="header-anchor" href="#python2-连接mysql">¶</a>python2 连接mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python-devel  </span><br><span class="line">yum | pip install  MySQL-python</span><br><span class="line"></span><br><span class="line">import MySQLdb</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="https://stackoverflow.com/questions/23285558/datetime-date2014-4-25-is-not-json-serializable-in-django" target="_blank" rel="noopener">datetime.date is not JSON serializable问题</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 常用命令</title>
    <url>/GitHub_base.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>依据他人文档整理</p></blockquote><h3 id="专有名词"><a class="header-anchor" href="#专有名词">¶</a>专有名词</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Workspace: 工作区</span><br><span class="line">Index/Stage: 暂存区</span><br><span class="line">Repository: 仓库区或本地仓库</span><br><span class="line">Remote: 远程仓库</span><br></pre></td></tr></table></figure><h3 id="初始化"><a class="header-anchor" href="#初始化">¶</a>初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前目录/新建目录 初始化</span></span><br><span class="line">git init [project-name]</span><br><span class="line"><span class="comment">#下载项目</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置文件"><a class="header-anchor" href="#配置文件">¶</a>配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Git的设置文件为.gitconfig，可在用户主目录（全局配置）可以在项目目录（项目配置）。</span></span><br><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">git config -e [--global]</span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h3 id="增加-删除变化"><a class="header-anchor" href="#增加-删除变化">¶</a>增加/删除变化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增加文件/目录到暂存区</span></span><br><span class="line">git add [file] | [dir]</span><br><span class="line"><span class="comment">#增加所有变化到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">git rm [file1] [file2]</span><br><span class="line"><span class="comment">#改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">git mv [file-original] [file-renamed</span><br></pre></td></tr></table></figure><h3 id="代码提交"><a class="header-anchor" href="#代码提交">¶</a>代码提交</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#提交暂存区到仓库区</span></span><br><span class="line">git commit -m [message]</span><br><span class="line"><span class="comment">#提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">git commit -v</span><br></pre></td></tr></table></figure><h3 id="分支"><a class="header-anchor" href="#分支">¶</a>分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出分支  默认本地分支  -r 远程分支 -a 本地和远程分支</span></span><br><span class="line">git branch </span><br><span class="line"><span class="comment">#新建分支，但留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="comment">#新建分支，切换到新分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="comment">#切换到指定分支 -f 强制切换</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"><span class="comment">#切换上一个分支</span></span><br><span class="line">git checkout -</span><br><span class="line"><span class="comment">#合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"><span class="comment">#删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="comment">#删除远程分支</span></span><br><span class="line">git push origin --delete[branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="标签"><a class="header-anchor" href="#标签">¶</a>标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出所有标签</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment">#新建一个tag在指定commit</span></span><br><span class="line">git tag [tag] [commit]</span><br><span class="line"><span class="comment">#删除本地tag</span></span><br><span class="line">git tag -d [tag]</span><br><span class="line"><span class="comment">#删除远程tag</span></span><br><span class="line">git pushorigin :refs/tags/[tagName]</span><br><span class="line"><span class="comment">#查看tag信息</span></span><br><span class="line">git show [tag]</span><br></pre></td></tr></table></figure><h3 id="远程同步"><a class="header-anchor" href="#远程同步">¶</a>远程同步</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">git push[remote] [branch]</span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">git push[remote] --all</span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push[remote] --force</span><br><span class="line">git fetch [remote]</span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">git remote show [remote]</span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a class="header-anchor" href="#查看信息">¶</a>查看信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">git <span class="built_in">log</span>--<span class="built_in">stat</span></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">git <span class="built_in">log</span>-S [keyword]</span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">git <span class="built_in">log</span>[tag] HEAD --pretty=format:%s</span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">git <span class="built_in">log</span>[tag] HEAD --grepfeature</span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">git <span class="built_in">log</span>--follow [file]</span><br><span class="line">git whatchanged [file]</span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">git <span class="built_in">log</span>-p [file]</span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">git <span class="built_in">log</span>-5 --pretty --oneline</span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">git shortlog -sn</span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">git blame [file]</span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">git diff --cached [file]</span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">git diff HEAD</span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">git diff [first-branch]...[second-branch]</span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">git show [commit]</span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">git show --name-only [commit]</span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">git show [commit]:[filename]</span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><h3 id="撤销"><a class="header-anchor" href="#撤销">¶</a>撤销</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">git checkout [file]</span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">git reset[file]</span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">git reset--hard</span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">git reset[commit]</span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">git reset--hard [commit]</span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">git reset--keep [commit]</span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">git revert [commit]</span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 终端提示符</title>
    <url>/Linux_PS1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h4 id="设置终端提示符步骤"><a class="header-anchor" href="#设置终端提示符步骤">¶</a>设置终端提示符步骤</h4><ol><li>修改环境变量</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><ol><li>添加修改内容</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PS1='\[\033[0;31m\]\342\224\214\342\224\200$([[ $? != 0 ]] &amp;&amp; echo "[\[\033[0;31m\]\342\234\227\[\033[0;37m\]]\342\224\200")[\[\033[0;39m\]\u\[\033[01;33m\]@\[\033[01;96m\]\h\[\033[0;31m\]]\342\224\200[\[\033[0;32m\]\w\[\033[0;31m\]]\n\[\033[0;31m\]\342\224\224\342\224\200\342\224\200\342\225\274 \[\033[0m\]\[\e[01;33m\]\$\[\e[0m\]'</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>加载环境变量</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ol><li><p>图片显示<br><img src="../images/Linux_PS1_01.jpg" alt="26T1D50.png"></p></li><li><p>查看终端提示符设置<br>该命令常被用于剽窃他人的终端提示符</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PS1</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 中ASCII显示图片</title>
    <url>/Linux_image.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><blockquote><p>在ubuntu中实现，且并没有什么实用价值的小技能</p></blockquote><h3 id="安装ImageMagick"><a class="header-anchor" href="#安装ImageMagick">¶</a>安装ImageMagick</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo  apt-get install imagemagick</span><br></pre></td></tr></table></figure><h3 id="安装aview"><a class="header-anchor" href="#安装aview">¶</a>安装aview</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install aview</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="执行转换命令"><a class="header-anchor" href="#执行转换命令">¶</a>执行转换命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">psb.jpg 为需要转换的图片</span></span><br><span class="line">asciiview psb.jpg -driver curses</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a class="header-anchor" href="#效果展示">¶</a>效果展示</h3><p><img src="../images/Linux_image_01.jpg" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>First Blog</title>
    <url>/Hexo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Thu Jan 07 2021 09:43:43 GMT+0800 (GMT+08:00) --><h4 id="前提条件"><a class="header-anchor" href="#前提条件">¶</a>前提条件</h4><ul><li>安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></li><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a></li></ul><h4 id="win10安装Hexo"><a class="header-anchor" href="#win10安装Hexo">¶</a>win10安装Hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git bash</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Hexo设置"><a class="header-anchor" href="#Hexo设置">¶</a>Hexo设置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">hexo初始化</span></span><br><span class="line">hexo init Blog</span><br><span class="line">git clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="git设置"><a class="header-anchor" href="#git设置">¶</a>git设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:Lianyi-xz/Lianyi-xz.github.io.git</span><br><span class="line">    coding: git@git.coding.net:lianyizhiwai/lianyizhiwai.coding.me.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a class="header-anchor" href="#常用命令">¶</a>常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地运行博客</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="comment">#博客部署到github 和coding仓库</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"><span class="comment">#源码保存到github仓库</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"source update"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="跨主机写作"><a class="header-anchor" href="#跨主机写作">¶</a>跨主机写作</h4><ol><li>创建hexo分支</li><li>将hexo设置为默认分支</li><li>部署hexo</li></ol><h4 id="添加自定义-menu"><a class="header-anchor" href="#添加自定义-menu">¶</a>添加自定义 menu</h4><blockquote><p>将分类添加到导航栏中</p></blockquote><h5 id="新添加菜单对应翻译"><a class="header-anchor" href="#新添加菜单对应翻译">¶</a>新添加菜单对应翻译</h5><p>打开<code>hexo&gt;theme&gt;next&gt;languages&gt;zh-Hans.yml</code>,在menu下添加:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  ...</span><br><span class="line">  devops: 技术</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">##### 在菜单中添加链接</span></span><br><span class="line">打开`hexo&gt;theme&gt;next&gt;_config.yml`,在menu下添加:  </span><br><span class="line">```bash</span><br><span class="line">menu:</span><br><span class="line">  ...</span><br><span class="line">  devops: /categories/devops</span><br></pre></td></tr></table></figure><h5 id="添加对应的菜单图标"><a class="header-anchor" href="#添加对应的菜单图标">¶</a>添加对应的菜单图标</h5><p>图标来自 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">fontawesome</a>,打开<code>hexo&gt;theme&gt;next&gt;_config.yml</code>,在menu_icons下添加:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  ...</span><br><span class="line">  devops: wrench</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h3><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题文档</a><br><a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">NexT第三方服务</a><br><a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">分类和标签</a><br><a href="https://leaferx.online/2017/01/30/Bottomheart/" target="_blank" rel="noopener">底部动画</a><br><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">NexT个性化</a><br><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">hexo+github</a><br><a href="https://segmentfault.com/a/1190000008082288" target="_blank" rel="noopener">hexo neat压缩</a><br><a href="https://coding.net/pages/" target="_blank" rel="noopener">coding blog</a><br><a href="https://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">Blog SEO</a><br><a href="http://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="noopener">Blog SEO</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务</tag>
      </tags>
  </entry>
</search>
